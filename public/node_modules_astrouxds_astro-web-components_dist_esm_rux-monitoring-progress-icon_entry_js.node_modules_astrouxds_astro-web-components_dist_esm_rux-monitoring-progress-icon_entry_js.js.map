{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-progress-icon_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-progress-icon_entry_js.js","mappings":";;;;;;;;;;;;;;;AAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,2CAA2C;AAC3C,iDAAiD;AACjD,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,2BAA2B,gBAAgB,MAAM,qDAAC,UAAU,qCAAqC,oDAAoD,GAAG;;AAExJ,2BAA2B,kBAAkB,MAAM,qDAAC,UAAU,qCAAqC;AACnG;AACA,EAAE,qDAAC,WAAW,wCAAwC,+CAA+C,GAAG;;AAElD;;;;;;;;;;;;;;;;;AClCS;AAC4B;;AAE3F,4CAA4C,qBAAqB,UAAU,UAAU,wBAAwB,mBAAmB,sBAAsB,qBAAqB,aAAa,sBAAsB,2BAA2B,kBAAkB,SAAS,cAAc,yBAAyB,sBAAsB,qBAAqB,iBAAiB,iCAAiC,aAAa,kBAAkB,cAAc,aAAa,uBAAuB,aAAa,kBAAkB,cAAc,aAAa,WAAW,kBAAkB,aAAa,cAAc,SAAS,4BAA4B,cAAc,UAAU,QAAQ,kBAAkB,gBAAgB,cAAc,0CAA0C,kBAAkB,wBAAwB,WAAW,mBAAmB,kBAAkB,gBAAgB,uBAAuB,mBAAmB,sBAAsB,4BAA4B,uBAAuB,mBAAmB,kBAAkB,uBAAuB,mBAAmB,gBAAgB,gBAAgB,gBAAgB,WAAW,kBAAkB,+BAA+B,iBAAiB,uBAAuB,YAAY,cAAc,6BAA6B,aAAa,IAAI,cAAc,WAAW,YAAY,oBAAoB,gCAAgC,8BAA8B,wBAAwB,oCAAoC,kCAAkC,uBAAuB,mCAAmC,iCAAiC,wBAAwB,oCAAoC,kCAAkC,wBAAwB,oCAAoC,kCAAkC,yBAAyB,qCAAqC,mCAAmC,oBAAoB,mDAAmD,yBAAyB,+BAA+B,iDAAiD,qBAAqB,sBAAsB,iBAAiB,kBAAkB,aAAa,uBAAuB,mBAAmB,WAAW,YAAY,0BAA0B,kBAAkB;;AAEvrE;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAC,UAAU,yEAAyE,oBAAoB,EAAE,YAAY,EAAE,cAAc,GAAG,EAAE,qDAAC,UAAU,0CAA0C,EAAE,qDAAC,iBAAiB,sBAAsB,GAAG,qDAAC,UAAU,mFAAmF,aAAa,GAAG,EAAE,qDAAC,QAAQ,gBAAgB,EAAE,qDAAC,aAAa,uIAAuI,GAAG,qDAAC,aAAa,4PAA4P,KAAK,qDAAC,UAAU,wCAAwC;AAC91B;AACA,kBAAkB,qDAAC,CAAC,2DAAe,IAAI,mCAAmC,IAAI,qDAAC,CAAC,2DAAe,IAAI,4CAA4C;AAC/I;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEqE","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js","webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-monitoring-progress-icon.entry.js"],"sourcesContent":["import { h } from './index-cf8aeed9.js';\n\nconst collapseNotifications = (value) => {\n  const n = Math.floor(value);\n  // don't show any values less than 0\n  if (n <= 0)\n    return null;\n  // get the place value\n  const thousand = Math.floor((n / 1000) % 1000); // only return a whole number\n  const million = (n / 1000000) % 1000000; // return a decimal value for numbers like 1.2m\n  const billion = (n / 1000000000) % 1000000000; // return a decimal value for numbers like 1.2b\n  const trillion = (n / 1000000000000) % 1000000000000; // trillion is just to offer an overflow instance\n  // set the display to its original state\n  let _shorthand = n.toString();\n  if (trillion >= 1) {\n    _shorthand = 'âˆž';\n  }\n  else if (billion >= 1) {\n    _shorthand = `${billion.toFixed(1).toString()}B`;\n  }\n  else if (million >= 1) {\n    _shorthand = `${million.toFixed(1).toString()}M`;\n  }\n  else if (thousand >= 1) {\n    _shorthand = `${thousand}K`;\n  }\n  return _shorthand;\n};\nconst MonitoringBadge = ({ notifications, }) => (h(\"div\", { class: `rux-advanced-status__badge ${!notifications ? 'rux-advanced-status__hidden' : ''}` }, notifications && collapseNotifications(notifications)));\n\nconst MonitoringLabel = ({ label, sublabel, }) => (h(\"div\", { class: \"rux-advanced-status__label\" },\n  label,\n  h(\"span\", { class: `rux-advanced-status__sublabel ${!sublabel ? 'rux-advanced-status__hidden' : ''}` }, sublabel)));\n\nexport { MonitoringLabel as M, MonitoringBadge as a };\n","import { r as registerInstance, h } from './index-cf8aeed9.js';\nimport { M as MonitoringLabel, a as MonitoringBadge } from './MonitoringLabel-ce07078e.js';\n\nconst ruxMonitoringProgressIconCss = \":host{display:inline-block;padding:0}*[hidden]{display:none !important}*,*:before,*:after{box-sizing:border-box}.rux-advanced-status{display:flex;flex-direction:column;justify-content:flex-start;position:relative;margin:0;line-height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.rux-advanced-status__icon-group{display:flex;position:relative;margin:0 auto;width:4.5rem}.icon-template-wrapper{display:flex;position:relative;margin:0 auto;width:4.5rem}rux-status{position:absolute;top:-0.25rem;left:-0.25rem;margin:0}.rux-advanced-status__badge{display:block;z-index:2;order:3;position:absolute;bottom:-0.75rem;right:-0.4rem;border:1px solid rgba(255, 255, 255, 0.6);border-radius:3px;padding:0.65rem 0.25rem;color:#fff;font-size:0.775rem;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:#000}.rux-advanced-status__label{color:var(--fontColor);font-size:0.875rem;text-align:center;text-overflow:ellipsis;white-space:nowrap;line-height:1.2;overflow:hidden;margin-top:1rem;width:100%;max-width:6.25rem}.rux-advanced-status__sublabel{font-size:0.65em;color:var(--fontColor);opacity:0.6;display:block}.rux-advanced-status__hidden{display:none}svg{margin:0 auto;width:3rem;height:3rem}svg.rux-status--off{stroke:var(--colorOff, #9ea7ad);fill:var(--colorOff, #9ea7ad)}svg.rux-status--standby{stroke:var(--colorStandby, #2dccff);fill:var(--colorStandby, #2dccff)}svg.rux-status--normal{stroke:var(--colorNormal, #56f000);fill:var(--colorNormal, #56f000)}svg.rux-status--caution{stroke:var(--colorCaution, #fce83a);fill:var(--colorCaution, #fce83a)}svg.rux-status--serious{stroke:var(--colorSerious, #ffb300);fill:var(--colorSerious, #ffb300)}svg.rux-status--critical{stroke:var(--colorCritical, #ff3838);fill:var(--colorCritical, #ff3838)}[data-progress] svg{transition:stroke-dashoffset 0.367s, stroke 0.367s;transform-origin:50% 50%}.rux-advanced-status__progress{font-family:var(--fontFamilyMono, \\\"monospace\\\");margin-top:-0.125rem;margin-left:-0.125rem;font-size:0.8rem;position:absolute;display:flex;justify-content:center;align-items:center;width:100%;height:100%;letter-spacing:-0.0625rem;text-align:center}\";\n\nconst RuxMonitoringProgressIcon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this._circumference = 56 * 2 * Math.PI;\n    this._defaultRangeList = [\n      {\n        threshold: 17,\n        status: 'off',\n      },\n      {\n        threshold: 33,\n        status: 'standby',\n      },\n      {\n        threshold: 49,\n        status: 'normal',\n      },\n      {\n        threshold: 65,\n        status: 'caution',\n      },\n      {\n        threshold: 81,\n        status: 'serious',\n      },\n      {\n        threshold: 100,\n        status: 'critical',\n      },\n    ];\n    /**\n     * Sets the minimum value for the progress range. When progress is this number, it reads 0%.\n     * When it is halfway between min and max, it will read 50%.\n     */\n    this.min = 0;\n    /**\n     * Sets the maximum value for the progress range. When progress is this number, it reads 100%.\n     * When it is halfway between min and max, it will read 50%.\n     */\n    this.max = 100;\n    /**\n     * Displays this value as a percentage of where it lies between min and max\n     * in the center of the donut graph and styles a proportional\n     * segment of the graph. Progress can be positive or negative (the later useful for countdowns).\n     * The progress value must exist within the thresholds specified in the range property below, and must be\n     * an integer. If a non-integer value is passed in, progress will default to 0. If progress ever\n     * becomes less than min or greater than max, it will be set to equal min or max respectively.\n     */\n    this.progress = 0;\n    this._status = 'off';\n    this._graphProgress = 0;\n  }\n  checkProgress(newValue, oldValue) {\n    if (Number.isInteger(this.progress)) {\n      if (newValue !== oldValue) {\n        this.updateProgress();\n      }\n    }\n    else {\n      this.progress = 0;\n    }\n  }\n  componentWillLoad() {\n    if (!this.range || this.range.length < 1) {\n      this.range = this._defaultRangeList;\n    }\n    if (Number.isInteger(this.progress)) {\n      this.range = this.range.sort((a, b) => a.threshold >= b.threshold ? 1 : -1);\n      this.updateProgress();\n    }\n    else {\n      this.progress = 0;\n    }\n  }\n  get status() {\n    return this._status;\n  }\n  updateProgress() {\n    if (this.progress > this.max) {\n      this.progress = this.max;\n    }\n    if (this.progress < this.min) {\n      this.progress = this.min;\n    }\n    const rangeStatus = this.range.find((range) => this.progress <= range.threshold);\n    this._status = rangeStatus ? rangeStatus.status : this.range[0].status;\n    this._graphProgress =\n      this._circumference -\n        ((this.progress - this.min) / (this.max - this.min)) *\n          this._circumference;\n  }\n  render() {\n    return (h(\"div\", { id: \"rux-advanced-status__icon\", class: \"rux-advanced-status\", title: `${this.notifications} ${this.label} ${this.sublabel}` }, h(\"div\", { class: \"rux-advanced-status__icon-group\" }, h(\"rux-status\", { status: this._status }), h(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 128 128\", class: `rux-status--${this._status}` }, h(\"g\", { id: \"progress\" }, h(\"circle\", { cx: \"60\", cy: \"60\", r: \"56\", fill: \"transparent\", stroke: \"rgba(40, 63, 88, 1)\", \"stroke-width\": \"10\", transform: \"rotate(-90 61 60)\" }), h(\"circle\", { cx: \"60\", cy: \"60\", r: \"56\", fill: \"transparent\", \"stroke-dasharray\": \"351.8583772 351.8583772\", \"stroke-dashoffset\": this._graphProgress, \"stroke-linecap\": \"round\", \"stroke-width\": \"10\", class: \"progress-ring__circle\", transform: \"rotate(-90 61 60)\" }))), h(\"div\", { class: \"rux-advanced-status__progress\" }, Math.ceil(((this.progress - this.min) /\n      (this.max - this.min)) *\n      100), \"%\"), h(MonitoringBadge, { notifications: this.notifications })), h(MonitoringLabel, { label: this.label, sublabel: this.sublabel })));\n  }\n  static get watchers() { return {\n    \"progress\": [\"checkProgress\"]\n  }; }\n};\nRuxMonitoringProgressIcon.style = ruxMonitoringProgressIconCss;\n\nexport { RuxMonitoringProgressIcon as rux_monitoring_progress_icon };\n"],"names":[],"sourceRoot":""}