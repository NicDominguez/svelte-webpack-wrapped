"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-push-button_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-push-button.entry.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-push-button.entry.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_push_button": () => (/* binding */ RuxPushButton)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");
/* harmony import */ var _utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-0c972f04.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js");



const ruxPushButtonCss = ":host{display:block;font-size:16px;height:1.3125rem;line-height:1.7;margin:0 2px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host[disabled]{opacity:var(--disabledOpacity);cursor:not-allowed}:host input{appearance:none;-webkit-appearance:none}:host .rux-push-button__button{display:flex;justify-content:center;align-items:center;height:1.375rem;font-size:1rem !important;margin:-27px 0 0 0;padding:0 0.625rem;color:var(--pushbuttonTextColor);background-color:var(--pushbuttonBackgroundColor);border-radius:var(--defaultBorderRadius);border:1px solid var(--pushbuttonBorderColor)}:host .rux-push-button__input:checked+.rux-push-button__button{display:flex;color:var(--pushbuttonSelectedTextColor);background-color:var(--pushbuttonSelectedBackgroundColor);border-color:var(--pushbuttonSelectedBorderColor)}:host .rux-push-button__input:disabled+.rux-push-button__button{opacity:var(--disabledOpacity);cursor:not-allowed}";

const RuxPushButton = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ruxChange = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-change", 7);
    this.ruxBlur = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-blur", 7);
    this.pushButtonId = `rux-push-button-${id++}`;
    /**
     * Disables the push button via HTML `disabled` attribute.
     * Button takes on a distinct disabled visual state.
     * Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Checks the push button via HTML `checked` attribute.
     * Push button takes on a distinct "enabled" or "selected" visual state.
     */
    this.checked = false;
    /**
     * The label of the push button.
     */
    this.label = 'Push Button';
    /**
     * The name of the push button.
     */
    this.name = '';
    /**
     * The value of the push button.
     */
    this.value = '';
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  componentWillLoad() {
    this._onChange = this._onChange.bind(this);
  }
  _onChange(e) {
    const target = e.target;
    this.checked = target.checked;
    this.ruxChange.emit(this.checked);
  }
  render() {
    const { disabled, checked, label, _onChange, value, _onBlur } = this;
    (0,_utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__.r)(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.H, { "aria-checked": `${checked}`, "aria-hidden": disabled ? 'true' : null, role: "switch" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { class: "rux-push-button__input", id: this.pushButtonId, type: "checkbox", disabled: disabled, checked: checked, onChange: _onChange, onBlur: () => _onBlur(), value: value }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "rux-push-button__button", htmlFor: this.pushButtonId }, label), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
  get el() { return (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
let id = 0;
RuxPushButton.style = ruxPushButtonCss;




/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ hasShadowDom),
/* harmony export */   "r": () => (/* binding */ renderHiddenInput)
/* harmony export */ });
const hasShadowDom = (el) => {
  return !!el.shadowRoot && !!el.attachShadow;
};
/**
* This method is used to add a hidden input to a host element that contains
* a Shadow DOM. It does not add the input inside of the Shadow root which
* allows it to be picked up inside of forms. It should contain the same
* values as the host element.
* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198

*
* @param always Add a hidden input even if the container does not use Shadow
* @param container The element where the input will be added
* @param name The name of the input
* @param value The value of the input
* @param disabled If true, the input is disabled
* @param checked Optional. If true, the input is checked
*/
const renderHiddenInput = (always, container, name, value, disabled, checked) => {
  let input = container.querySelector('input.aux-input');
  if (always || hasShadowDom(container)) {
    if (checked || checked == undefined) {
      if (!input) {
        input = container.ownerDocument.createElement('input');
        input.type = 'hidden';
        input.classList.add('aux-input');
        container.appendChild(input);
      }
      input.disabled = disabled;
      input.name = name;
      input.value = value || '';
    }
    else {
      if (input) {
        input.remove();
      }
    }
  }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-push-button_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-push-button_entry_js.js.map