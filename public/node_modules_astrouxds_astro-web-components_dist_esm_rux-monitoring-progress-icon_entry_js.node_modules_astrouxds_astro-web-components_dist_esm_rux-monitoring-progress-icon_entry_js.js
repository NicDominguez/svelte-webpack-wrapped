"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-progress-icon_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M": () => (/* binding */ MonitoringLabel),
/* harmony export */   "a": () => (/* binding */ MonitoringBadge)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");


const collapseNotifications = (value) => {
  const n = Math.floor(value);
  // don't show any values less than 0
  if (n <= 0)
    return null;
  // get the place value
  const thousand = Math.floor((n / 1000) % 1000); // only return a whole number
  const million = (n / 1000000) % 1000000; // return a decimal value for numbers like 1.2m
  const billion = (n / 1000000000) % 1000000000; // return a decimal value for numbers like 1.2b
  const trillion = (n / 1000000000000) % 1000000000000; // trillion is just to offer an overflow instance
  // set the display to its original state
  let _shorthand = n.toString();
  if (trillion >= 1) {
    _shorthand = 'âˆž';
  }
  else if (billion >= 1) {
    _shorthand = `${billion.toFixed(1).toString()}B`;
  }
  else if (million >= 1) {
    _shorthand = `${million.toFixed(1).toString()}M`;
  }
  else if (thousand >= 1) {
    _shorthand = `${thousand}K`;
  }
  return _shorthand;
};
const MonitoringBadge = ({ notifications, }) => ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `rux-advanced-status__badge ${!notifications ? 'rux-advanced-status__hidden' : ''}` }, notifications && collapseNotifications(notifications)));

const MonitoringLabel = ({ label, sublabel, }) => ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-advanced-status__label" },
  label,
  (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: `rux-advanced-status__sublabel ${!sublabel ? 'rux-advanced-status__hidden' : ''}` }, sublabel)));




/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-monitoring-progress-icon.entry.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-monitoring-progress-icon.entry.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_monitoring_progress_icon": () => (/* binding */ RuxMonitoringProgressIcon)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");
/* harmony import */ var _MonitoringLabel_ce07078e_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MonitoringLabel-ce07078e.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js");



const ruxMonitoringProgressIconCss = ":host{display:inline-block;padding:0}*[hidden]{display:none !important}*,*:before,*:after{box-sizing:border-box}.rux-advanced-status{display:flex;flex-direction:column;justify-content:flex-start;position:relative;margin:0;line-height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.rux-advanced-status__icon-group{display:flex;position:relative;margin:0 auto;width:4.5rem}.icon-template-wrapper{display:flex;position:relative;margin:0 auto;width:4.5rem}rux-status{position:absolute;top:-0.25rem;left:-0.25rem;margin:0}.rux-advanced-status__badge{display:block;z-index:2;order:3;position:absolute;bottom:-0.75rem;right:-0.4rem;border:1px solid rgba(255, 255, 255, 0.6);border-radius:3px;padding:0.65rem 0.25rem;color:#fff;font-size:0.775rem;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:#000}.rux-advanced-status__label{color:var(--fontColor);font-size:0.875rem;text-align:center;text-overflow:ellipsis;white-space:nowrap;line-height:1.2;overflow:hidden;margin-top:1rem;width:100%;max-width:6.25rem}.rux-advanced-status__sublabel{font-size:0.65em;color:var(--fontColor);opacity:0.6;display:block}.rux-advanced-status__hidden{display:none}svg{margin:0 auto;width:3rem;height:3rem}svg.rux-status--off{stroke:var(--colorOff, #9ea7ad);fill:var(--colorOff, #9ea7ad)}svg.rux-status--standby{stroke:var(--colorStandby, #2dccff);fill:var(--colorStandby, #2dccff)}svg.rux-status--normal{stroke:var(--colorNormal, #56f000);fill:var(--colorNormal, #56f000)}svg.rux-status--caution{stroke:var(--colorCaution, #fce83a);fill:var(--colorCaution, #fce83a)}svg.rux-status--serious{stroke:var(--colorSerious, #ffb300);fill:var(--colorSerious, #ffb300)}svg.rux-status--critical{stroke:var(--colorCritical, #ff3838);fill:var(--colorCritical, #ff3838)}[data-progress] svg{transition:stroke-dashoffset 0.367s, stroke 0.367s;transform-origin:50% 50%}.rux-advanced-status__progress{font-family:var(--fontFamilyMono, \"monospace\");margin-top:-0.125rem;margin-left:-0.125rem;font-size:0.8rem;position:absolute;display:flex;justify-content:center;align-items:center;width:100%;height:100%;letter-spacing:-0.0625rem;text-align:center}";

const RuxMonitoringProgressIcon = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this._circumference = 56 * 2 * Math.PI;
    this._defaultRangeList = [
      {
        threshold: 17,
        status: 'off',
      },
      {
        threshold: 33,
        status: 'standby',
      },
      {
        threshold: 49,
        status: 'normal',
      },
      {
        threshold: 65,
        status: 'caution',
      },
      {
        threshold: 81,
        status: 'serious',
      },
      {
        threshold: 100,
        status: 'critical',
      },
    ];
    /**
     * Sets the minimum value for the progress range. When progress is this number, it reads 0%.
     * When it is halfway between min and max, it will read 50%.
     */
    this.min = 0;
    /**
     * Sets the maximum value for the progress range. When progress is this number, it reads 100%.
     * When it is halfway between min and max, it will read 50%.
     */
    this.max = 100;
    /**
     * Displays this value as a percentage of where it lies between min and max
     * in the center of the donut graph and styles a proportional
     * segment of the graph. Progress can be positive or negative (the later useful for countdowns).
     * The progress value must exist within the thresholds specified in the range property below, and must be
     * an integer. If a non-integer value is passed in, progress will default to 0. If progress ever
     * becomes less than min or greater than max, it will be set to equal min or max respectively.
     */
    this.progress = 0;
    this._status = 'off';
    this._graphProgress = 0;
  }
  checkProgress(newValue, oldValue) {
    if (Number.isInteger(this.progress)) {
      if (newValue !== oldValue) {
        this.updateProgress();
      }
    }
    else {
      this.progress = 0;
    }
  }
  componentWillLoad() {
    if (!this.range || this.range.length < 1) {
      this.range = this._defaultRangeList;
    }
    if (Number.isInteger(this.progress)) {
      this.range = this.range.sort((a, b) => a.threshold >= b.threshold ? 1 : -1);
      this.updateProgress();
    }
    else {
      this.progress = 0;
    }
  }
  get status() {
    return this._status;
  }
  updateProgress() {
    if (this.progress > this.max) {
      this.progress = this.max;
    }
    if (this.progress < this.min) {
      this.progress = this.min;
    }
    const rangeStatus = this.range.find((range) => this.progress <= range.threshold);
    this._status = rangeStatus ? rangeStatus.status : this.range[0].status;
    this._graphProgress =
      this._circumference -
        ((this.progress - this.min) / (this.max - this.min)) *
          this._circumference;
  }
  render() {
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "rux-advanced-status__icon", class: "rux-advanced-status", title: `${this.notifications} ${this.label} ${this.sublabel}` }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-advanced-status__icon-group" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("rux-status", { status: this._status }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 128 128", class: `rux-status--${this._status}` }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("g", { id: "progress" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { cx: "60", cy: "60", r: "56", fill: "transparent", stroke: "rgba(40, 63, 88, 1)", "stroke-width": "10", transform: "rotate(-90 61 60)" }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { cx: "60", cy: "60", r: "56", fill: "transparent", "stroke-dasharray": "351.8583772 351.8583772", "stroke-dashoffset": this._graphProgress, "stroke-linecap": "round", "stroke-width": "10", class: "progress-ring__circle", transform: "rotate(-90 61 60)" }))), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-advanced-status__progress" }, Math.ceil(((this.progress - this.min) /
      (this.max - this.min)) *
      100), "%"), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_MonitoringLabel_ce07078e_js__WEBPACK_IMPORTED_MODULE_1__.a, { notifications: this.notifications })), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_MonitoringLabel_ce07078e_js__WEBPACK_IMPORTED_MODULE_1__.M, { label: this.label, sublabel: this.sublabel })));
  }
  static get watchers() { return {
    "progress": ["checkProgress"]
  }; }
};
RuxMonitoringProgressIcon.style = ruxMonitoringProgressIconCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-progress-icon_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-progress-icon_entry_js.js.map