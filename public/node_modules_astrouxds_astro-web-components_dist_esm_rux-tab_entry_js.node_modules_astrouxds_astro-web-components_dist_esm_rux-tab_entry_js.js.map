{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-tab_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-tab_entry_js.js","mappings":";;;;;;;;;;;;;;AAA2F;;AAE3F,yBAAyB,8BAA8B,iCAAiC,6BAA6B,uCAAuC,0CAA0C,wCAAwC,sBAAsB,aAAa,mBAAmB,uBAAuB,eAAe,SAAS,eAAe,qBAAqB,0BAA0B,8CAA8C,WAAW,gBAAgB,mBAAmB,uBAAuB,eAAe,eAAe,8CAA8C,yBAAyB,sDAAsD,kBAAkB,kCAAkC,sDAAsD,cAAc,+BAA+B,kBAAkB,0BAA0B,+BAA+B,6BAA6B;;AAE95B;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAC,CAAC,iDAAI,IAAI,sCAAsC,EAAE,qDAAC;AAC/D;AACA,aAAa,OAAO,qDAAU;AAC9B;AACA;;AAE6B","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tab.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-cf8aeed9.js';\n\nconst ruxTabCss = \":host{--tabTextColor:var(--primary);--tabBackgroundColor:transparent;--tabBorderColor:transparent;--tabHoverTextColor:var(--defaultText);--tabSelectedTextColor:var(--defaultText);--tabSelectedBorderColor:var(--primary);box-sizing:border-box;display:flex;align-items:center;justify-content:center;padding:0 2rem;margin:0;min-width:5rem;text-decoration:none;color:var(--tabTextColor);border-bottom:5px solid var(--tabBorderColor)}:host span{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}:host([small]){min-width:2rem;border-bottom:3px solid var(--tabBorderColor)}:host([small][selected]){border-bottom:solid 3px var(--tabSelectedBorderColor)}:host([selected]){color:var(--tabSelectedTextColor);border-bottom:5px solid var(--tabSelectedBorderColor)}:host(:hover){color:var(--tabHoverTextColor)}:host([disabled]){color:var(--tabTextColor);opacity:var(--disabledOpacity);cursor:var(--disabledCursor)}\";\n\nconst RuxTab = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     *  If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.\n     */\n    this.selected = false;\n    /**\n     * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.\n     */\n    this.disabled = false;\n  }\n  connectedCallback() {\n    var _a, _b;\n    this.el.setAttribute('role', 'tab');\n    this.el.addEventListener('click', this.clickHandler);\n    if ((_b = (_a = this.el) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.getAttributeNode('small')) {\n      this.el.setAttribute('small', '');\n    }\n  }\n  clickHandler(e) {\n    if (this.disabled) {\n      e.stopImmediatePropagation();\n    }\n  }\n  render() {\n    return (h(Host, { onClick: (e) => this.clickHandler(e) }, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n};\nRuxTab.style = ruxTabCss;\n\nexport { RuxTab as rux_tab };\n"],"names":[],"sourceRoot":""}