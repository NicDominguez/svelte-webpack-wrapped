"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-radio_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-radio.entry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-radio.entry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_radio": () => (/* binding */ RuxRadio)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");


const ruxRadioCss = ":host{box-sizing:border-box;--controlLabelColor:var(--defaultText);--controlOutlineBackgroundColor:var(--backgroundColor);--controlBorderColor:var(--colorSecondaryDarken2);--controlHoverBorderColor:var(--primaryLight);--controlTextColor:var(--colorSecondary500);--controlSelectedOutlineBorderColor:var(--primary)}:host *,:host *:before,:host *:after{box-sizing:inherit}.rux-form-field{display:flex;flex-direction:column;font-family:var(--fontFamily);font-size:var(--fontSize);color:var(--fontColor)}.rux-radio{display:flex;position:relative;line-height:1.2}.rux-radio input[type=radio]{-webkit-appearance:none;appearance:none}.rux-radio input[type=radio]+label{position:relative;display:flex;align-items:center;justify-content:flex-start;margin-left:-8px;color:var(--controlLabelColor);letter-spacing:0.5px;cursor:pointer}.rux-radio input[type=radio]+label:before{box-sizing:border-box;display:flex;flex-shrink:0;flex-grow:0;content:\"\";align-self:start;height:var(--controlOptionSize);width:var(--controlOptionSize);margin:0 0.625rem 0 0;border:1px solid var(--controlSelectedBorderColor);border-radius:100%;background-color:var(--controlOutlineBackgroundColor)}.rux-radio input[type=radio]+label:after{position:absolute;top:5px;display:flex;content:\"\"}.rux-radio input[type=radio]:checked+label::before{background-color:var(--controlSelectedOutlineBackgroundColor);border-color:var(--controlSelectedBorderColor)}.rux-radio input[type=radio]:checked+label::after{position:absolute;top:5px;display:flex;content:\"\";left:5px;height:8px;width:8px;border-radius:100%;background-color:var(--primary)}.rux-radio input[type=radio]:disabled+label{cursor:var(--disabledCursor);opacity:var(--disabledOpacity)}.rux-radio input[type=radio]:not(:disabled):hover+label::before,.rux-radio input[type=radio]:not(:disabled):checked:hover+label::before{border-color:var(--controlHoverBorderColor)}.rux-radio input[type=radio]:not(:disabled):checked:hover+label::after{background-color:var(--controlBackgroundColor)}";

let id = 0;
const RuxRadio = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ruxChange = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-change", 7);
    this.ruxBlur = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-blur", 7);
    this.radioId = `rux-radio-${++id}`;
    this.radioGroup = null;
    /**
     * The radio name
     */
    this.name = '';
    /**
     * The radio value
     */
    this.value = '';
    /**
     * Toggles checked state of a radio
     */
    this.checked = false;
    /**
     * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  connectedCallback() {
    this._onChange = this._onChange.bind(this);
    this.radioGroup = this.el.closest('rux-radio-group');
    this.syncFromGroup = this.syncFromGroup.bind(this);
    if (this.radioGroup) {
      this.syncFromGroup();
      this.radioGroup.addEventListener('rux-change', this.syncFromGroup);
    }
  }
  disconnectedCallback() {
    if (this.radioGroup) {
      this.radioGroup.removeEventListener('rux-change', this.syncFromGroup);
    }
  }
  /**
   * Sets checked property when the parent Radio Group value changes.
   */
  syncFromGroup() {
    if (this.radioGroup && this.radioGroup.value) {
      this.checked = this.radioGroup.value === this.value;
    }
  }
  _onChange(e) {
    const target = e.target;
    this.checked = target.checked;
    this.ruxChange.emit(this.checked);
  }
  render() {
    const { radioId, checked, disabled, name, value, _onChange, _onBlur, } = this;
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-form-field" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-radio" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { type: "radio", name: name, id: radioId, disabled: disabled, checked: checked, value: value, onChange: _onChange, onBlur: () => _onBlur() }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { htmlFor: radioId }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)))));
  }
  get el() { return (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
RuxRadio.style = ruxRadioCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-radio_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-radio_entry_js.js.map