{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-notification_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-notification_entry_js.js","mappings":";;;;;;;;;;;;;;AAA0E;;AAE1E,kCAAkC,aAAa,8BAA8B,iBAAiB,YAAY,mBAAmB,qBAAqB,cAAc,OAAO,gBAAgB,WAAW,kBAAkB,kBAAkB,6CAA6C,yBAAyB,sBAAsB,4BAA4B,mCAAmC,eAAe,mBAAmB,yBAAyB,cAAc,MAAM,8BAA8B,6CAA6C,gDAAgD,kCAAkC,gCAAgC,uBAAuB,4CAA4C,gCAAgC,iCAAiC,+BAA+B,wBAAwB,6CAA6C,iCAAiC,kCAAkC,gCAAgC,yBAAyB,8CAA8C,kCAAkC,mCAAmC,iCAAiC;;AAEroC;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAC,CAAC,iDAAI,QAAQ,qDAAC,UAAU,oCAAoC,KAAK,aAAa,IAAI,qDAAC,eAAe,2GAA2G;AAC1N;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAE+C","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-notification.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-cf8aeed9.js';\n\nconst ruxNotificationCss = \":host{display:flex;justify-content:space-between;flex-wrap:nowrap;flex-grow:1;align-items:center;align-content:center;top:-4.375rem;left:0;height:4.375rem;width:100%;position:absolute;padding:0 1.25rem;background-color:var(--colorStandbyLighten1);transition:top 0.5s ease;box-sizing:border-box;font-size:var(--fontSizeXL);color:var(--notificationTextColor)}:host rux-icon{align-items:center;justify-content:flex-end}:host([open]){top:0}:host,:host([status=standby]){background-color:var(--colorStandbyLighten1)}:host rux-icon,:host([status=standby]) rux-icon{stroke:var(--colorStandbyDarken1);fill:var(--colorStandbyDarken1)}:host([status=normal]){background-color:var(--colorNormalLighten2)}:host([status=normal]) rux-icon{stroke:var(--colorNormalDarken1);fill:var(--colorNormalDarken1)}:host([status=caution]){background-color:var(--colorCautionLighten1)}:host([status=caution]) rux-icon{stroke:var(--colorCautionDarken1);fill:var(--colorCautionDarken1)}:host([status=critical]){background-color:var(--colorCriticalLighten1)}:host([status=critical]) rux-icon{stroke:var(--colorCriticalDarken1);fill:var(--colorCriticalDarken1)}\";\n\nconst RuxNotification = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     *  Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).\n     */\n    this.open = false;\n    /**\n     *  Message for the notification banner.\n     */\n    this.message = '';\n    /**\n     *  The background color. Possible values include 'standby', 'normal', 'caution', and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).\n     */\n    this.status = 'standby';\n    this._timeoutRef = null;\n  }\n  watchHandler() {\n    this.updated();\n  }\n  connectedCallback() {\n    this.updated();\n  }\n  updated() {\n    if (this._closeAfter && this.open) {\n      this._timeoutRef = window.setTimeout(() => {\n        this.open = false;\n      }, this._closeAfter);\n    }\n  }\n  _onClick() {\n    if (this._timeoutRef) {\n      clearTimeout(this._timeoutRef);\n    }\n    this.open = false;\n  }\n  get _closeAfter() {\n    //* as long as it's less than 1000, they put in seconds. Convert that here.\n    if (this.closeAfter && this.closeAfter <= 999) {\n      //it's in seconds\n      this.closeAfter *= 1000; // change into ms\n    }\n    if ((this.closeAfter && this.closeAfter > 10000) ||\n      (this.closeAfter && this.closeAfter < 2000)) {\n      // if this number is larger than 10s or smaller than 2s, enforce minimum 2s delay\n      this.closeAfter = 2000;\n    }\n    return this.closeAfter;\n  }\n  render() {\n    return (h(Host, null, h(\"div\", { class: \"rux-notification__message\" }, `${this.message}`), h(\"rux-icon\", { role: \"button\", label: \"Close notification\", onClick: () => this._onClick(), icon: \"close\", size: \"small\" })));\n  }\n  static get watchers() { return {\n    \"open\": [\"watchHandler\"]\n  }; }\n};\nRuxNotification.style = ruxNotificationCss;\n\nexport { RuxNotification as rux_notification };\n"],"names":[],"sourceRoot":""}