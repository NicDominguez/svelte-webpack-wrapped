"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-tree-node_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree-node.entry.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree-node.entry.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_tree_node": () => (/* binding */ RuxTreeNode)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");


const ruxTreeNodeCss = ":host{--treeAccentColor:var(--primary);--treeHoverBackgroundColor:var(--primaryLight);--treeHoverTextColor:var(--primaryElementText);--treeSelectedBorderColor:var(--primaryDark);--treeSelectedAccentColor:var(--primary);--treeExpandedBorderColor:var(--backgroundColor);position:relative;box-sizing:border-box;width:100%;padding:0px;margin:0px;font-size:1rem;color:var(--treeTextColor);user-select:none;width:100%;display:block}:host([aria-expanded=true][aria-level=\"1\"]:not([aria-selected=true])) .parent:after{border-bottom:solid 1px var(--treeExpandedBorderColor)}:host([aria-selected=true]) .parent:after{content:\"\";height:30px;width:100%;left:0px;z-index:0;position:absolute;transition:background-color 0.0967s ease-in 0s;border-top:1px solid var(--treeSelectedBorderColor);border-bottom:1px solid var(--treeSelectedBorderColor);box-shadow:inset 0.25rem 0 0 var(--treeSelectedAccentColor) !important}:host([aria-level=\"1\"]) .parent{font-weight:bold;padding-left:0.5rem}:host([aria-level=\"1\"]) .parent:after{content:\"\";height:31px;width:100%;left:0px;z-index:0;position:absolute;transition:background-color 0.0967s ease-in 0s}:host([aria-level=\"1\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:2rem}:host([aria-level=\"2\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:3.5rem}:host([aria-level=\"3\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:5rem}:host([aria-level=\"3\"]) .parent{padding-left:3.5rem}:host([aria-level=\"4\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:6.5rem}:host([aria-level=\"4\"]) .parent{padding-left:5rem}.parent{height:2rem;padding:0 0.5rem 0 2rem;display:flex;align-items:center}.parent:hover{color:var(--treeHoverTextColor);background:var(--treeHoverBackgroundColor)}.children{display:none}.tree-node--expanded>.children{display:block !important}.tree-node--expanded .arrow{transform:rotate(90deg)}.arrow{position:relative;cursor:pointer;width:0.35rem;margin-right:1rem;margin-left:0.15rem;background-color:transparent;transition:transform 0.167s ease-in-out 0s;z-index:11}.arrow::before{content:\"\";display:block;height:1.5rem;width:1.5rem;top:-0.15rem;left:-0.65rem;position:absolute}.arrow::after{content:\"\";width:0px;height:0px;border-style:solid;border-width:0.35rem 0px 0.35rem 0.35rem;border-color:transparent transparent transparent var(--treeAccentColor);display:inline-block}::slotted(rux-status){margin:0 0.625rem}::slotted(rux-tree-node){position:relative}::slotted(rux-tree-node)::before{content:\"\";order:1;position:absolute;top:0;cursor:pointer;width:20px;height:20px;margin-right:1rem;margin-left:0.15rem;left:-40px;background-color:transparent;transition:transform 0.167s ease-in-out 0s;z-index:11}";

let id = 0;
const RuxTreeNode = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ruxTreeNodeSelected = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-tree-node-selected", 7);
    this.componentId = `node-${++id}`;
    this.children = [];
    /**
     * Sets the expanded state
     */
    this.expanded = false;
    /**
     * Sets the selected state
     */
    this.selected = false;
  }
  handleExpandedChange(newValue) {
    this.setExpanded(newValue);
  }
  handleSelectedChange(newValue) {
    this.setSelected(newValue);
  }
  handleKeyDown(ev) {
    if (ev.target !== ev.currentTarget) {
      return true;
    }
    switch (ev.key) {
      case 'ArrowUp':
        ev.preventDefault();
        this._focusNext(-1);
        break;
      case 'ArrowRight':
        ev.preventDefault();
        this._expandNextNode();
        break;
      case 'ArrowDown':
        ev.preventDefault();
        this._focusNext(1);
        break;
      case 'ArrowLeft':
        ev.preventDefault();
        this._collapseParent();
        break;
      case 'Enter':
        ev.preventDefault();
        this.setSelected(true);
        break;
    }
  }
  connectedCallback() {
    this.handleSlotChange = this.handleSlotChange.bind(this);
  }
  componentWillLoad() {
    this.handleSlotChange();
  }
  get _hasChildren() {
    return this.children.length > 0;
  }
  /**
   * Sets the expanded state
   * @param value
   */
  async setExpanded(value) {
    this.expanded = value;
  }
  /**
   * Sets the selected state
   * @param value
   */
  async setSelected(value) {
    this.selected = value;
    if (value) {
      this.ruxTreeNodeSelected.emit(this.componentId);
    }
  }
  handleSlotChange() {
    const children = Array.from(this.el.querySelectorAll(`[slot="node"]`));
    this.children = children;
    this._setAriaLevel();
  }
  /**
   * Manually set the aria-level attribute.
   * Tree is responsible for setting the root node levels.
   */
  _setAriaLevel() {
    const level = this.el.getAttribute('aria-level');
    if (level) {
      this.children.map((child) => {
        child.setAttribute('aria-level', `${+level + 1}`);
      });
    }
  }
  _handleArrowClick(e) {
    e.stopPropagation();
    this.setExpanded(!this.expanded);
  }
  _handleTreeNodeClick(e) {
    e.stopPropagation();
    this.setSelected(!this.selected);
  }
  _expandNextNode() {
    if (!this.expanded && this._hasChildren) {
      this.setExpanded(true);
    }
  }
  _focusItem(el) {
    var _a;
    const parent = (_a = el === null || el === void 0 ? void 0 : el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.parent');
    if (parent) {
      parent.focus();
    }
  }
  _collapseParent() {
    if (this.expanded) {
      this.setExpanded(false);
    }
    else if (this.el.parentElement) {
      const parentTreeItemNode = this.el.parentElement.closest("[role='treeitem']");
      if (parentTreeItemNode) {
        this._focusItem(parentTreeItemNode);
      }
    }
  }
  _focusNext(direction) {
    const visibleNodes = this._getVisibleNodes();
    const currentIndex = visibleNodes.indexOf(this.el);
    if (currentIndex !== -1) {
      let nextElement = visibleNodes[currentIndex + direction];
      if (nextElement !== undefined) {
        // Skips any disabled nodes
        while (nextElement.hasAttribute('disabled')) {
          const offset = direction >= 0 ? 1 : -1;
          nextElement =
            visibleNodes[currentIndex + direction + offset];
          if (!nextElement) {
            break;
          }
        }
      }
      if (nextElement) {
        this._focusItem(nextElement);
      }
    }
  }
  _getVisibleNodes() {
    const rootTree = this.el.closest("[role='tree']");
    const nodes = Array.from(rootTree.querySelectorAll('rux-tree-node'));
    return nodes.filter((node) => node.offsetParent !== null);
  }
  render() {
    const attrs = this._hasChildren && { role: 'group' };
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.H, { role: "treeitem", "aria-expanded": this.expanded ? 'true' : 'false', "aria-selected": this.selected ? 'true' : 'false', onClick: (event) => this._handleTreeNodeClick(event) }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: this.componentId, class: {
        'tree-node': true,
        'tree-node--expanded': this.expanded,
        'tree-node--has-children': this._hasChildren,
        'tree-node--selected': this.selected,
      } }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "parent", tabindex: "0" }, this._hasChildren && ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("i", { onClick: (e) => this._handleArrowClick(e), class: "arrow" })), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { onSlotchange: this.handleSlotChange })), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", Object.assign({}, attrs, { class: "children" }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "node", onSlotchange: this.handleSlotChange })))));
  }
  get el() { return (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
  static get watchers() { return {
    "expanded": ["handleExpandedChange"],
    "selected": ["handleSelectedChange"]
  }; }
};
RuxTreeNode.style = ruxTreeNodeCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-tree-node_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-tree-node_entry_js.js.map