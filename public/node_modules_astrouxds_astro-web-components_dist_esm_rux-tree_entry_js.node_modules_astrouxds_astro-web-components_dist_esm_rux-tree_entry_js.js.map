{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-tree_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-tree_entry_js.js","mappings":";;;;;;;;;;;;;;AAA2F;;AAE3F,0BAA0B,mCAAmC,6CAA6C,qCAAqC,cAAc,kBAAkB,sBAAsB,YAAY,eAAe,2BAA2B,wCAAwC,4CAA4C,iBAAiB,WAAW;;AAE3W;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAC,CAAC,iDAAI,IAAI,cAAc,EAAE,qDAAC,UAAU,wCAAwC,EAAE,qDAAC,WAAW,qCAAqC;AAC5I;AACA,aAAa,OAAO,qDAAU;AAC9B;AACA;;AAE+B","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-cf8aeed9.js';\n\nconst ruxTreeCss = \":host{--treeTextColor:var(--defaultText);--treeBackgroundColor:var(--surfaceElements);--treeBorderColor:var(--primaryDark);display:block;position:relative;box-sizing:border-box;padding:0px;font-size:1rem;color:var(--treeTextColor);border:solid 1px var(--treeBorderColor);background-color:var(--treeBackgroundColor);user-select:none;width:100%}\";\n\nconst RuxTree = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  connectedCallback() {\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n    this.handleNodeSelected = this.handleNodeSelected.bind(this);\n  }\n  disconnectedCallback() {\n    var _a;\n    const slot = (_a = this.slotContainer) === null || _a === void 0 ? void 0 : _a.querySelector('slot');\n    const assignedElements = slot.assignedElements({\n      flatten: true,\n    });\n    assignedElements.map((el) => {\n      el.removeEventListener('rux-tree-node-selected', this.handleNodeSelected);\n    });\n  }\n  handleSlotChange() {\n    var _a;\n    const slot = (_a = this.slotContainer) === null || _a === void 0 ? void 0 : _a.querySelector('slot');\n    const assignedElements = slot.assignedElements({\n      flatten: true,\n    });\n    assignedElements.map((el) => {\n      el.setAttribute('aria-level', '1');\n      el.addEventListener('rux-tree-node-selected', this.handleNodeSelected);\n    });\n  }\n  handleNodeSelected(e) {\n    const allNodes = document.querySelectorAll('rux-tree-node');\n    if (allNodes) {\n      const previousSelectedNode = Array.from(allNodes).find((node) => {\n        var _a, _b;\n        return (node.selected &&\n          ((_b = (_a = node.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.tree-node')) === null || _b === void 0 ? void 0 : _b.id) !==\n            e.detail);\n      });\n      if (previousSelectedNode) {\n        previousSelectedNode.selected = false;\n      }\n    }\n  }\n  render() {\n    return (h(Host, { role: \"tree\" }, h(\"div\", { ref: (el) => (this.slotContainer = el) }, h(\"slot\", { onSlotchange: this.handleSlotChange }))));\n  }\n  get el() { return getElement(this); }\n};\nRuxTree.style = ruxTreeCss;\n\nexport { RuxTree as rux_tree };\n"],"names":[],"sourceRoot":""}