{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-tabs_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-tabs_entry_js.js","mappings":";;;;;;;;;;;;;;AAA2F;;AAE3F,oCAAoC,6BAA6B,sBAAsB,aAAa,2BAA2B,iBAAiB,oBAAoB,YAAY,WAAW,SAAS,UAAU,sBAAsB,wBAAwB,yBAAyB,qBAAqB,iBAAiB,iBAAiB,mBAAmB,8CAA8C,eAAe,oBAAoB,eAAe;;AAE/b;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAC,CAAC,iDAAI,QAAQ,qDAAC;AAC3B;AACA,aAAa,OAAO,qDAAU;AAC9B;AACA;;AAE+B","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tabs.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-cf8aeed9.js';\n\nconst ruxTabsCss = \":host,.rux-tabs{--tabBorderColor:transparent;box-sizing:border-box;display:flex;justify-content:flex-start;font-size:1.5rem;min-height:5.625rem;height:100%;width:auto;margin:0;padding:0;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;contain:content;}.rux-tabs .rux-tab{border-bottom:5px solid var(--tabBorderColor)}:host([small]){min-height:3.125rem;font-size:1rem}\";\n\nconst RuxTabs = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     *  Holds all `<rux-tab-panel>` components based on the event emitted from the `<rux-tab-panels>` component.\n     */\n    this._panels = [];\n    /**\n     *  Holds all `<rux-tab>` components that are children of `<rux-tabs>`.\n     */\n    this._tabs = [];\n  }\n  handleListen(e) {\n    this._registerPanels(e);\n  }\n  connectedCallback() {\n    this.el.addEventListener('click', (e) => this._onClick(e));\n    this._addTabs();\n  }\n  _addTabs() {\n    this._tabs = Array.from(this.el.querySelectorAll('rux-tab'));\n  }\n  _registerPanels(e) {\n    e.detail.forEach((panel) => {\n      this._panels.push(panel);\n    });\n    // Default to first tab if none are selected\n    const selectedTab = this._tabs.find((tab) => tab.selected) || this._tabs[0];\n    this._setTab(selectedTab);\n  }\n  _onClick(e) {\n    const tab = e.target;\n    if (tab.getAttribute('role') === 'tab' &&\n      tab.getAttribute('disabled') === null) {\n      this._setTab(tab);\n    }\n  }\n  _reset() {\n    // hide everything\n    this._tabs.forEach((tab) => (tab.selected = false));\n    //* classLIst on rux-tab-panel is an array of strings.\n    this._panels.forEach((panel) => panel.classList.add('hidden'));\n  }\n  _setTab(selectedTab) {\n    this._reset();\n    // find the panel whose aria-labeldby attribute matches the tabâ€™s id\n    const selectedPanel = this._panels.find((panel) => panel.getAttribute('aria-labelledby') ===\n      selectedTab.getAttribute('id'));\n    if (selectedTab)\n      selectedTab.selected = true;\n    if (selectedPanel)\n      selectedPanel.classList.remove('hidden');\n  }\n  render() {\n    return (h(Host, null, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n};\nRuxTabs.style = ruxTabsCss;\n\nexport { RuxTabs as rux_tabs };\n"],"names":[],"sourceRoot":""}