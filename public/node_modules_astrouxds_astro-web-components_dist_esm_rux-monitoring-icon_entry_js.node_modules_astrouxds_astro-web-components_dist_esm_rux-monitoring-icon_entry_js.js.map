{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-icon_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-icon_entry_js.js","mappings":";;;;;;;;;;;;;;;AAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,2CAA2C;AAC3C,iDAAiD;AACjD,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,2BAA2B,gBAAgB,MAAM,qDAAC,UAAU,qCAAqC,oDAAoD,GAAG;;AAExJ,2BAA2B,kBAAkB,MAAM,qDAAC,UAAU,qCAAqC;AACnG;AACA,EAAE,qDAAC,WAAW,wCAAwC,+CAA+C,GAAG;;AAElD;;;;;;;;;;;;;;;;;AClCS;AAC4B;;AAE3F,oCAAoC,qBAAqB,UAAU,UAAU,wBAAwB,mBAAmB,sBAAsB,qBAAqB,aAAa,sBAAsB,2BAA2B,kBAAkB,SAAS,cAAc,yBAAyB,sBAAsB,qBAAqB,iBAAiB,iCAAiC,aAAa,kBAAkB,cAAc,aAAa,SAAS,QAAQ,cAAc,aAAa,cAAc,6BAA6B,kBAAkB,YAAY,aAAa,SAAS,4BAA4B,cAAc,UAAU,QAAQ,kBAAkB,gBAAgB,cAAc,0CAA0C,kBAAkB,wBAAwB,WAAW,mBAAmB,kBAAkB,gBAAgB,uBAAuB,mBAAmB,sBAAsB,4BAA4B,uBAAuB,mBAAmB,kBAAkB,uBAAuB,mBAAmB,gBAAgB,gBAAgB,gBAAgB,WAAW,kBAAkB,+BAA+B,iBAAiB,uBAAuB,YAAY,cAAc,6BAA6B,aAAa,6BAA6B,qBAAqB,iCAAiC,yBAAyB,gCAAgC,wBAAwB,iCAAiC,yBAAyB,iCAAiC,yBAAyB,kCAAkC,0BAA0B;;AAEnjD;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAC,UAAU,yEAAyE,oBAAoB,EAAE,YAAY,EAAE,cAAc,GAAG,EAAE,qDAAC,UAAU,0CAA0C,EAAE,qDAAC,UAAU,sCAAsC,EAAE,qDAAC,iBAAiB,qBAAqB,IAAI,qDAAC,eAAe,uCAAuC,YAAY,GAAG,GAAG,qDAAC,CAAC,2DAAe,IAAI,mCAAmC,IAAI,qDAAC,CAAC,2DAAe,IAAI,4CAA4C;AAClf;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEoD","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js","webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-monitoring-icon.entry.js"],"sourcesContent":["import { h } from './index-cf8aeed9.js';\n\nconst collapseNotifications = (value) => {\n  const n = Math.floor(value);\n  // don't show any values less than 0\n  if (n <= 0)\n    return null;\n  // get the place value\n  const thousand = Math.floor((n / 1000) % 1000); // only return a whole number\n  const million = (n / 1000000) % 1000000; // return a decimal value for numbers like 1.2m\n  const billion = (n / 1000000000) % 1000000000; // return a decimal value for numbers like 1.2b\n  const trillion = (n / 1000000000000) % 1000000000000; // trillion is just to offer an overflow instance\n  // set the display to its original state\n  let _shorthand = n.toString();\n  if (trillion >= 1) {\n    _shorthand = '∞';\n  }\n  else if (billion >= 1) {\n    _shorthand = `${billion.toFixed(1).toString()}B`;\n  }\n  else if (million >= 1) {\n    _shorthand = `${million.toFixed(1).toString()}M`;\n  }\n  else if (thousand >= 1) {\n    _shorthand = `${thousand}K`;\n  }\n  return _shorthand;\n};\nconst MonitoringBadge = ({ notifications, }) => (h(\"div\", { class: `rux-advanced-status__badge ${!notifications ? 'rux-advanced-status__hidden' : ''}` }, notifications && collapseNotifications(notifications)));\n\nconst MonitoringLabel = ({ label, sublabel, }) => (h(\"div\", { class: \"rux-advanced-status__label\" },\n  label,\n  h(\"span\", { class: `rux-advanced-status__sublabel ${!sublabel ? 'rux-advanced-status__hidden' : ''}` }, sublabel)));\n\nexport { MonitoringLabel as M, MonitoringBadge as a };\n","import { r as registerInstance, h } from './index-cf8aeed9.js';\nimport { M as MonitoringLabel, a as MonitoringBadge } from './MonitoringLabel-ce07078e.js';\n\nconst ruxMonitoringIconCss = \":host{display:inline-block;padding:0}*[hidden]{display:none !important}*,*:before,*:after{box-sizing:border-box}.rux-advanced-status{display:flex;flex-direction:column;justify-content:flex-start;position:relative;margin:0;line-height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.rux-advanced-status__icon-group{display:flex;position:relative;margin:0 auto;width:4.5rem}rux-icon{order:2;margin:0 auto;width:2.7rem;height:2.7rem}.rux-advanced-status__status{position:absolute;top:-0.4rem;left:-0.4rem;margin:0}.rux-advanced-status__badge{display:block;z-index:2;order:3;position:absolute;bottom:-0.75rem;right:-0.4rem;border:1px solid rgba(255, 255, 255, 0.6);border-radius:3px;padding:0.65rem 0.25rem;color:#fff;font-size:0.775rem;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:#000}.rux-advanced-status__label{color:var(--fontColor);font-size:0.875rem;text-align:center;text-overflow:ellipsis;white-space:nowrap;line-height:1.2;overflow:hidden;margin-top:1rem;width:100%;max-width:6.25rem}.rux-advanced-status__sublabel{font-size:0.65em;color:var(--fontColor);opacity:0.6;display:block}.rux-advanced-status__hidden{display:none}:host([status=off]) rux-icon{fill:var(--colorOff)}:host([status=standby]) rux-icon{fill:var(--colorStandby)}:host([status=normal]) rux-icon{fill:var(--colorNormal)}:host([status=caution]) rux-icon{fill:var(--colorCaution)}:host([status=serious]) rux-icon{fill:var(--colorSerious)}:host([status=critical]) rux-icon{fill:var(--colorCritical)}\";\n\nconst RuxMonitoringIcon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Styles the icon according to the Astro Status colors.\n     * Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.\n     */\n    this.status = 'normal';\n    /**\n     * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon.\n     * Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands,\n     * `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.\n     */\n    this.notifications = 0;\n  }\n  validateStatus(newValue) {\n    const statusTypes = {\n      off: true,\n      standby: true,\n      normal: true,\n      caution: true,\n      serious: true,\n      critical: true,\n    };\n    if (!statusTypes[newValue]) {\n      throw new Error('valid status required');\n    }\n  }\n  render() {\n    return (h(\"div\", { id: \"rux-advanced-status__icon\", class: \"rux-advanced-status\", title: `${this.notifications} ${this.label} ${this.sublabel}` }, h(\"div\", { class: \"rux-advanced-status__icon-group\" }, h(\"div\", { class: \"rux-advanced-status__status\" }, h(\"rux-status\", { status: this.status })), h(\"rux-icon\", { icon: this.icon, class: `rux-status--${this.status}` }), h(MonitoringBadge, { notifications: this.notifications })), h(MonitoringLabel, { label: this.label, sublabel: this.sublabel })));\n  }\n  static get watchers() { return {\n    \"status\": [\"validateStatus\"]\n  }; }\n};\nRuxMonitoringIcon.style = ruxMonitoringIconCss;\n\nexport { RuxMonitoringIcon as rux_monitoring_icon };\n"],"names":[],"sourceRoot":""}