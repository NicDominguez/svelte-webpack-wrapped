{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-modal_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-modal_entry_js.js","mappings":";;;;;;;;;;;;;;AAA6G;;AAE7G,2BAA2B,uBAAuB,mBAAmB,mBAAmB,UAAU,wBAAwB,iBAAiB,gBAAgB,iBAAiB,oBAAoB,oBAAoB,eAAe,MAAM,OAAO,aAAa,YAAY,aAAa,uBAAuB,mBAAmB,aAAa,oCAAoC,mBAAmB,kBAAkB,aAAa,sBAAsB,8BAA8B,6CAA6C,YAAY,eAAe,yCAAyC,kBAAkB,YAAY,UAAU,iBAAiB,kHAAkH,qBAAqB,aAAa,YAAY,cAAc,uBAAuB,mBAAmB,WAAW,YAAY,yCAAyC,iBAAiB,YAAY,wBAAwB,eAAe,gBAAgB,gBAAgB,UAAU,SAAS,6BAA6B,oBAAoB,aAAa,sBAAsB,YAAY,aAAa,yBAAyB,oBAAoB,uCAAuC,SAAS,qBAAqB,uBAAuB,2BAA2B;;AAEjyC;AACA;AACA,IAAI,qDAAgB;AACpB,0BAA0B,qDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB,EAAE,qBAAqB;AAC3D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY,6EAA6E;AACzF,qBAAqB,qDAAC,CAAC,iDAAI,QAAQ,qDAAC,UAAU,6BAA6B,EAAE,qDAAC,aAAa,4CAA4C,EAAE,qDAAC,aAAa,8BAA8B,EAAE,qDAAC,2BAA2B,qDAAC,UAAU,6BAA6B,EAAE,qDAAC,UAAU,6BAA6B,iBAAiB,qDAAC,uBAAuB,oBAAoB,EAAE,qDAAC,iBAAiB,qIAAqI,aAAa,qDAAC,iBAAiB,mGAAmG;AAC7nB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa,sBAAsB,wCAAwC,GAAG,yBAAyB,IAAI,yCAAyC;AAC9K;AACA;AACA,kBAAkB,OAAO,qDAAU;AACnC,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEiC","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-modal.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-cf8aeed9.js';\n\nconst ruxModalCss = \":host{box-sizing:border-box;}*,*:before,*:after{box-sizing:inherit}*[hidden]{display:none !important}rux-button-group{margin-top:auto;margin-left:auto;align-self:flex-end}.rux-modal__wrapper{position:fixed;top:0;left:0;height:100vh;width:100vw;display:flex;justify-content:center;align-items:center;z-index:1100;background-color:rgba(0, 0, 0, 0.5)}.rux-modal__dialog{position:relative;display:flex;flex-direction:column;justify-content:space-between;background-color:var(--modalBackgroundColor);width:28rem;height:13.5rem;border:2px solid var(--modalBorderColor);border-radius:4px;margin:auto;padding:0;user-select:none;box-shadow:0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 3px rgba(0, 0, 0, 0.12), 0 4px 5px 0 rgba(0, 0, 0, 0.2)}.rux-modal__titlebar{display:flex;flex-grow:0;flex-shrink:0;justify-content:center;align-items:center;width:100%;height:2rem;background-color:var(--modalBorderColor);user-select:none;cursor:move}.rux-modal__titlebar h1{font-size:1rem;font-weight:600;line-height:1.2;padding:0;margin:0;color:var(--modalTitleColor)}.rux-modal__content{display:flex;flex-direction:column;flex-grow:1;padding:1rem;color:var(--defaultText)}.rux-modal__message{margin:0.5rem 1.875rem 2.5rem 1.875rem}rux-icon{margin-right:0.75rem}.rux-modal .rux-button{box-shadow:none !important}\";\n\nconst RuxModal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ruxModalClosed = createEvent(this, \"rux-modal-closed\", 7);\n    /**\n     * Text for confirmation button\n     */\n    this.confirmText = 'Confirm';\n    /**\n     * Text for close button\n     */\n    this.denyText = 'Cancel';\n    this.kebabize = (str) => {\n      return str\n        .split('')\n        .map((letter, idx) => {\n        return letter.toUpperCase() === letter\n          ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}`\n          : letter;\n      })\n        .join('');\n    };\n  }\n  // confirm dialog if Enter key is pressed\n  handleKeyDown(ev) {\n    if (ev.key === 'Enter') {\n      const button = this._getDefaultButton();\n      if (button) {\n        button.click();\n      }\n    }\n  }\n  // close modal if click happens outside of dialog\n  handleClick(ev) {\n    const wrapper = this._getWrapper();\n    if (ev.composedPath()[0] === wrapper) {\n      this.ruxModalClosed.emit(false);\n      this.open = false;\n    }\n  }\n  validateName(isOpen) {\n    if (isOpen) {\n      setTimeout(() => {\n        const button = this._getDefaultButton();\n        button && button.focus();\n      });\n    }\n  }\n  _handleModalChoice(e) {\n    // convert string value to boolean\n    const target = e.currentTarget;\n    const choice = target.dataset.value === 'true';\n    this.ruxModalClosed.emit(choice);\n    this.open = false;\n  }\n  _getDefaultButton() {\n    var _a, _b;\n    const buttonSet = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelectorAll('rux-button:not([hidden])');\n    if (buttonSet.length > 0) {\n      const defaultButton = buttonSet[buttonSet.length - 1];\n      return defaultButton;\n    }\n    return null;\n  }\n  _getWrapper() {\n    var _a, _b;\n    const wrapper = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.rux-modal__wrapper');\n    if (wrapper) {\n      return wrapper;\n    }\n    return null;\n  }\n  connectedCallback() {\n    this.validate('rux-modal', ['open', 'modalMessage', 'modalTitle']);\n    setTimeout(() => {\n      const button = this._getDefaultButton();\n      button && button.focus();\n    });\n  }\n  componentDidLoad() {\n    setTimeout(() => {\n      const button = this._getDefaultButton();\n      button && button.focus();\n    });\n  }\n  render() {\n    const { open, modalMessage, modalTitle, confirmText, denyText, _handleModalChoice, } = this;\n    return (open && (h(Host, null, h(\"div\", { class: \"rux-modal__wrapper\" }, h(\"dialog\", { class: \"rux-modal__dialog\", role: \"dialog\" }, h(\"header\", { class: \"rux-modal__titlebar\" }, h(\"h1\", null, modalTitle)), h(\"div\", { class: \"rux-modal__content\" }, h(\"div\", { class: \"rux-modal__message\" }, modalMessage), h(\"rux-button-group\", { \"h-align\": \"right\" }, h(\"rux-button\", { secondary: confirmText.length > 0, onClick: _handleModalChoice.bind(this), \"data-value\": \"false\", hidden: !denyText, tabindex: \"-1\" }, denyText), h(\"rux-button\", { onClick: _handleModalChoice.bind(this), \"data-value\": \"true\", hidden: !confirmText, tabindex: \"0\" }, confirmText))))))));\n  }\n  // TODO find a way to share logic to put this validation into\n  // Stencil prevents using native extends class functionality\n  validate(componentTag, requiredProps) {\n    const erroredFields = [];\n    const isBlank = (prop) => typeof prop === 'undefined';\n    requiredProps.forEach((key) => isBlank(this[key])\n      ? erroredFields.push(this.kebabize(key))\n      : null);\n    if (erroredFields.length) {\n      throw new Error(`[${componentTag}]: Following propert${erroredFields.length > 1 ? 'ies' : 'y'} (${erroredFields.join(', ')}) ${erroredFields.length > 1 ? 'are' : 'is'} required`);\n    }\n  }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"open\": [\"validateName\"]\n  }; }\n};\nRuxModal.style = ruxModalCss;\n\nexport { RuxModal as rux_modal };\n"],"names":[],"sourceRoot":""}