{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-textarea_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-textarea_entry_js.js","mappings":";;;;;;;;;;;;;;;AAA6G;AAChD;;AAE7D,8BAA8B,cAAc,oBAAoB,sBAAsB,gBAAgB,QAAQ,mBAAmB,WAAW,eAAe,yCAAyC,kBAAkB,8BAA8B,gCAAgC,4BAA4B,6CAA6C,6BAA6B,gDAAgD,8BAA8B,YAAY,+BAA+B,mBAAmB,6BAA6B,0BAA0B,aAAa,sBAAsB,8BAA8B,0BAA0B,uBAAuB,0BAA0B,0CAA0C,aAAa,iCAAiC,0BAA0B,0CAA0C,aAAa,iCAAiC,oCAAoC,yCAAyC,4BAA4B,mCAAmC,gDAAgD,iCAAiC,eAAe,mBAAmB,8BAA8B,yBAAyB,YAAY,0BAA0B,uBAAuB,kBAAkB,sDAAsD,qDAAqD,4BAA4B,+CAA+C,eAAe,4BAA4B,qBAAqB,oBAAoB,2BAA2B,mBAAmB,4BAA4B,gJAAgJ,8BAA8B,mBAAmB,qBAAqB,sBAAsB,sBAAsB,6vBAA6vB,4BAA4B,qBAAqB,qCAAqC,gBAAgB,kBAAkB,gBAAgB,QAAQ,oBAAoB,2BAA2B,mBAAmB,4BAA4B,gJAAgJ,8BAA8B,iBAAiB;;AAExhG;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,qBAAqB,qDAAW;AAChC,oBAAoB,qDAAW;AAC/B,mBAAmB,qDAAW;AAC9B,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qDAAiB;AACrB,YAAY,qDAAC,CAAC,iDAAI,QAAQ,qDAAC,UAAU;AACrC;AACA;AACA,SAAS,EAAE,qDAAC,YAAY,oDAAoD,eAAe,qDAAC,eAAe;AAC3G;AACA;AACA;AACA,OAAO,qHAAqH,yCAAyC,qDAAC,UAAU,wBAAwB,sCAAsC,qDAAC,UAAU,yBAAyB;AAClR;AACA,aAAa,OAAO,qDAAU;AAC9B;AACA;;AAEuC;;;;;;;;;;;;;;;;ACtEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqD","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-textarea.entry.js","webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-cf8aeed9.js';\nimport { r as renderHiddenInput } from './utils-0c972f04.js';\n\nconst ruxTextareaCss = \":host{display:block}:host .rux-textarea{box-sizing:border-box;-webkit-order:2;order:2;min-height:4.25rem;width:100%;padding:0.5rem;border:1px solid var(--inputBorderColor);border-radius:3px;font-family:var(--fontFamily);font-size:var(--fontSize, 1rem);color:var(--inputTextColor);background-color:var(--inputBackgroundColor)}:host .rux-textarea--invalid{border:1px solid var(--inputInvalidBorderColor)}:host .rux-textarea--disabled{opacity:0.4;opacity:var(--disabledOpacity);cursor:not-allowed;cursor:var(--disabledCursor)}:host .rux-textarea-field{display:flex;flex-direction:column;font-family:var(--fontFamily);font-size:var(--fontSize);color:var(--fontColor)}:host .rux-textarea:focus{border-color:var(--inputFocusBorderColor);outline:none;color:var(--inputFocusTextColor)}:host .rux-textarea:hover{border-color:var(--inputFocusBorderColor);outline:none;color:var(--inputFocusTextColor)}:host .rux-textarea--disabled:hover{border:1px solid var(--inputBorderColor);color:var(--inputTextColor)}:host .rux-textarea--invalid:hover{border:1px solid var(--inputInvalidBorderColor)}:host .rux-textarea::placeholder{font-size:1rem;font-weight:normal;font-family:var(--fontFamily);color:var(--defaultText);opacity:0.6}:host .rux-textarea-label{margin-bottom:0.375rem}:host ::selection{background-color:var(--inputSelectionBackgroundColor)}:host .rux-textarea-field--small .rux-textarea-label{font-size:var(--fontSizeMD)}:host .rux-textarea-field--small .rux-textarea{padding:0.3rem;font-size:var(--fontSizeMD)}:host .rux-help-text{margin-top:0.625rem;color:var(--secondaryText);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\\\"Roboto\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \\\"Helvetica Neue\\\", sans-serif;font-family:var(--fontFamily);font-weight:normal;letter-spacing:0.5px}:host .rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--colorCritical);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\\\"Roboto\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \\\"Helvetica Neue\\\", sans-serif;font-family:var(--fontFamily);font-weight:bold}\";\n\nlet id = 0;\nconst RuxTextarea = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ruxChange = createEvent(this, \"rux-change\", 7);\n    this.ruxInput = createEvent(this, \"rux-input\", 7);\n    this.ruxBlur = createEvent(this, \"rux-blur\", 7);\n    this.inputId = `rux-textarea-${++id}`;\n    /**\n     * Marks the input as invalid\n     */\n    this.invalid = false;\n    /**\n     * The input value\n     */\n    this.value = '';\n    /**\n     * The input name\n     */\n    this.name = '';\n    /**\n     * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.\n     */\n    this.disabled = false;\n    /**\n     * Sets the input as disabled\n     */\n    this.required = false;\n    /**\n     * Styles the input element and label smaller for space-limited situations.\n     */\n    this.small = false;\n    this._onBlur = () => {\n      this.ruxBlur.emit();\n    };\n  }\n  connectedCallback() {\n    this._onChange = this._onChange.bind(this);\n    this._onInput = this._onInput.bind(this);\n  }\n  _onChange(e) {\n    const target = e.target;\n    this.value = target.value;\n    this.ruxChange.emit();\n  }\n  _onInput(e) {\n    const target = e.target;\n    this.value = target.value;\n    this.ruxInput.emit();\n  }\n  render() {\n    renderHiddenInput(true, this.el, this.name, this.value, this.disabled);\n    return (h(Host, null, h(\"div\", { class: {\n        'rux-textarea-field': true,\n        'rux-textarea-field--small': this.small,\n      } }, h(\"label\", { class: \"rux-textarea-label\", htmlFor: this.inputId }, this.label), h(\"textarea\", { name: this.name, disabled: this.disabled, \"aria-invalid\": this.invalid ? 'true' : 'false', placeholder: this.placeholder, required: this.required, minlength: this.minLength, maxlength: this.maxLength, value: this.value, class: {\n        'rux-textarea': true,\n        'rux-textarea--disabled': this.disabled,\n        'rux-textarea--invalid': this.invalid,\n      }, id: this.inputId, rows: this.rows, onChange: this._onChange, onInput: this._onInput, onBlur: () => this._onBlur() })), this.helpText && !this.errorText && (h(\"div\", { class: \"rux-help-text\" }, this.helpText)), this.errorText && (h(\"div\", { class: \"rux-error-text\" }, this.errorText))));\n  }\n  get el() { return getElement(this); }\n};\nRuxTextarea.style = ruxTextareaCss;\n\nexport { RuxTextarea as rux_textarea };\n","const hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n\nexport { hasShadowDom as h, renderHiddenInput as r };\n"],"names":[],"sourceRoot":""}