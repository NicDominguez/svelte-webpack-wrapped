"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-textarea_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-textarea.entry.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-textarea.entry.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_textarea": () => (/* binding */ RuxTextarea)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");
/* harmony import */ var _utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-0c972f04.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js");



const ruxTextareaCss = ":host{display:block}:host .rux-textarea{box-sizing:border-box;-webkit-order:2;order:2;min-height:4.25rem;width:100%;padding:0.5rem;border:1px solid var(--inputBorderColor);border-radius:3px;font-family:var(--fontFamily);font-size:var(--fontSize, 1rem);color:var(--inputTextColor);background-color:var(--inputBackgroundColor)}:host .rux-textarea--invalid{border:1px solid var(--inputInvalidBorderColor)}:host .rux-textarea--disabled{opacity:0.4;opacity:var(--disabledOpacity);cursor:not-allowed;cursor:var(--disabledCursor)}:host .rux-textarea-field{display:flex;flex-direction:column;font-family:var(--fontFamily);font-size:var(--fontSize);color:var(--fontColor)}:host .rux-textarea:focus{border-color:var(--inputFocusBorderColor);outline:none;color:var(--inputFocusTextColor)}:host .rux-textarea:hover{border-color:var(--inputFocusBorderColor);outline:none;color:var(--inputFocusTextColor)}:host .rux-textarea--disabled:hover{border:1px solid var(--inputBorderColor);color:var(--inputTextColor)}:host .rux-textarea--invalid:hover{border:1px solid var(--inputInvalidBorderColor)}:host .rux-textarea::placeholder{font-size:1rem;font-weight:normal;font-family:var(--fontFamily);color:var(--defaultText);opacity:0.6}:host .rux-textarea-label{margin-bottom:0.375rem}:host ::selection{background-color:var(--inputSelectionBackgroundColor)}:host .rux-textarea-field--small .rux-textarea-label{font-size:var(--fontSizeMD)}:host .rux-textarea-field--small .rux-textarea{padding:0.3rem;font-size:var(--fontSizeMD)}:host .rux-help-text{margin-top:0.625rem;color:var(--secondaryText);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\"Roboto\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;font-family:var(--fontFamily);font-weight:normal;letter-spacing:0.5px}:host .rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--colorCritical);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\"Roboto\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;font-family:var(--fontFamily);font-weight:bold}";

let id = 0;
const RuxTextarea = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ruxChange = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-change", 7);
    this.ruxInput = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-input", 7);
    this.ruxBlur = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-blur", 7);
    this.inputId = `rux-textarea-${++id}`;
    /**
     * Marks the input as invalid
     */
    this.invalid = false;
    /**
     * The input value
     */
    this.value = '';
    /**
     * The input name
     */
    this.name = '';
    /**
     * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Sets the input as disabled
     */
    this.required = false;
    /**
     * Styles the input element and label smaller for space-limited situations.
     */
    this.small = false;
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  connectedCallback() {
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
  }
  _onChange(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxChange.emit();
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  render() {
    (0,_utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__.r)(true, this.el, this.name, this.value, this.disabled);
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        'rux-textarea-field': true,
        'rux-textarea-field--small': this.small,
      } }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "rux-textarea-label", htmlFor: this.inputId }, this.label), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("textarea", { name: this.name, disabled: this.disabled, "aria-invalid": this.invalid ? 'true' : 'false', placeholder: this.placeholder, required: this.required, minlength: this.minLength, maxlength: this.maxLength, value: this.value, class: {
        'rux-textarea': true,
        'rux-textarea--disabled': this.disabled,
        'rux-textarea--invalid': this.invalid,
      }, id: this.inputId, rows: this.rows, onChange: this._onChange, onInput: this._onInput, onBlur: () => this._onBlur() })), this.helpText && !this.errorText && ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-help-text" }, this.helpText)), this.errorText && ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-error-text" }, this.errorText))));
  }
  get el() { return (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
RuxTextarea.style = ruxTextareaCss;




/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ hasShadowDom),
/* harmony export */   "r": () => (/* binding */ renderHiddenInput)
/* harmony export */ });
const hasShadowDom = (el) => {
  return !!el.shadowRoot && !!el.attachShadow;
};
/**
* This method is used to add a hidden input to a host element that contains
* a Shadow DOM. It does not add the input inside of the Shadow root which
* allows it to be picked up inside of forms. It should contain the same
* values as the host element.
* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198

*
* @param always Add a hidden input even if the container does not use Shadow
* @param container The element where the input will be added
* @param name The name of the input
* @param value The value of the input
* @param disabled If true, the input is disabled
* @param checked Optional. If true, the input is checked
*/
const renderHiddenInput = (always, container, name, value, disabled, checked) => {
  let input = container.querySelector('input.aux-input');
  if (always || hasShadowDom(container)) {
    if (checked || checked == undefined) {
      if (!input) {
        input = container.ownerDocument.createElement('input');
        input.type = 'hidden';
        input.classList.add('aux-input');
        container.appendChild(input);
      }
      input.disabled = disabled;
      input.name = name;
      input.value = value || '';
    }
    else {
      if (input) {
        input.remove();
      }
    }
  }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-textarea_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-textarea_entry_js.js.map