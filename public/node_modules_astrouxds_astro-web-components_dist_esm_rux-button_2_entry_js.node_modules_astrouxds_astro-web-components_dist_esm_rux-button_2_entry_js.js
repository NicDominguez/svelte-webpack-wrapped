"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-button_2_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-button_2.entry.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-button_2.entry.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_button": () => (/* binding */ RuxButton),
/* harmony export */   "rux_button_group": () => (/* binding */ RuxButtonGroup)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");
/* harmony import */ var _utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-0c972f04.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js");



const ruxButtonCss = ":host{}.rux-button{display:flex;position:relative;margin:0;padding:0 1rem;height:2.125rem;min-width:2.25rem;border-radius:var(--buttonBorderRadius);color:var(--buttonTextColor);font-family:var(--fontFamily);font-size:1rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;justify-content:center;align-items:center;user-select:none}.rux-button ::slotted(rux-icon),.rux-button rux-icon{height:1rem;width:1rem;margin-right:0.625rem}.rux-button:disabled{opacity:var(--disabledOpacity);cursor:var(--disabledCursor)}.rux-button:focus{outline:none}.rux-button:hover:not([disabled]){cursor:pointer}.rux-button:active:not([hover]):not([disabled]){border-color:var(--buttonActiveBorderColor) !important;background-color:var(--buttonActiveBackgroundColor) !important}.rux-button:hover:not([active]):not([disabled]):not(.rux-button--secondary){border-color:var(--buttonHoverBorderColor);background-color:var(--buttonHoverBackgroundColor)}.rux-button-group{display:flex}.rux-button-group .rux-button:not(:last-child){margin-right:0.625rem}.rux-button:not(.rux-button--secondary){border:1px solid var(--buttonBorderColor);background-color:var(--buttonBackgroundColor)}.rux-button__icon{height:1.5rem;width:1.5rem;margin-right:0.625rem;margin-left:-0.625rem}.rux-button__icon .rux-icon{height:auto;width:100%;fill:var(--buttonTextColor);color:var(--buttonTextColor)}.rux-button--secondary{color:var(--buttonSecondaryTextColor);background-color:var(--buttonSecondaryBackgroundColor);border:1px solid var(--buttonSecondaryBorderColor)}.rux-button--secondary:active:not([hover]):not([disabled]){border-color:var(--buttonSecondaryBorderColor) !important;background-color:var(--buttonSecondaryBackgroundColor) !important}.rux-button--secondary:hover:not([disabled]){color:var(--buttonSecondaryTextColor);background-color:var(--buttonSecondaryHoverBackgroundColor);border-color:var(--buttonSecondaryHoverBorderColor)}.rux-button--small{height:1.625rem;padding:0 1rem;line-height:1}.rux-button--small .rux-button--icon-only{width:3rem;height:1.625rem}.rux-button--small.rux-button__icon{height:0.875rem;width:0.875rem}.rux-button--small.rux-button--icon-only{min-width:1.625rem;padding:0 0.75rem}.rux-button--large{height:2.875rem;min-width:3rem;padding:0 1rem}.rux-button--large .rux-button--icon-only{width:3rem;height:2.875rem}.rux-button--large .rux-button__icon{height:1rem;width:1rem}.rux-button--critical,.rux-button--critical:active:not([hover]):not([disabled]):not(.rux-button--secondary){background-color:var(--colorCriticalDarken1) !important;border-color:var(--colorCriticalDarken1) !important}.rux-button--critical:hover:not([active]):not([disabled]),.rux-button--critical:active:not([hover]):not([disabled]):not(.rux-button--secondary):hover:not([active]):not([disabled]){background-color:var(--colorCritical);border-color:var(--colorCritical)}.rux-button--icon-only{font-size:0px;width:3rem;hieght:2.125rem}.rux-button--icon-only .rux-button__icon{margin-left:-0.625rem;margin-right:-0.625rem}.rux-button--large.rux-button--icon-only .rux-button__icon{margin-left:-1rem;margin-right:-1rem}.rux-button--icon-only ::slotted(rux-icon),.rux-button--icon-only rux-icon{margin-left:-0.625rem;margin-right:-0.625rem}.rux-button--large.rux-button--icon-only ::slotted(rux-icon),.rux-button--large.rux-button--icon-only rux-icon{margin-left:-1rem;margin-right:-1rem}.rux-button--small ::slotted(rux-icon),.rux-button--small rux-icon{height:1rem;width:1rem}.rux-button--large ::slotted(rux-icon),.rux-button--large rux-icon{height:1rem;width:1rem}.rux-button rux-icon{fill:var(--buttonTextColor)}.rux-button--secondary rux-icon,.rux-button--secondary rux-icon svg>use{fill:var(--buttonSecondaryTextColor)}.rux-button ::slotted(rux-icon){fill:var(--buttonTextColor)}.rux-button--secondary ::slotted(rux-icon){fill:var(--buttonSecondaryTextColor)}";

const RuxButton = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    /**
     * Hides slotted text from the button by setting rux-button--icon-only class
     */
    this.iconOnly = false;
    /**
     * Changes button style from solid to secondary by setting rux-button--secondary class
     */
    this.secondary = false;
    /**
     * Toggles disabled attribute on the button
     */
    this.disabled = false;
    /**
     * The button type. Use 'submit' to submit native form data.
     */
    this.type = 'button';
    /**
     * Creates and appends a native <button> if used within a form
     * so that it can trigger the submit event.
     *
     * Shadow DOM limitation prevents <form> from working correctly.
     * https://github.com/ionic-team/ionic-framework/blob/main/core/src/components/button/button.tsx
     * @param ev
     */
    this.handleClick = (ev) => {
      if ((0,_utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__.h)(this.el)) {
        const form = this.el.closest('form');
        if (form) {
          ev.preventDefault();
          const fakeButton = document.createElement('button');
          fakeButton.type = this.type;
          fakeButton.style.display = 'none';
          form.appendChild(fakeButton);
          fakeButton.click();
          fakeButton.remove();
        }
      }
    };
  }
  render() {
    const { size, iconOnly, secondary, disabled, icon } = this;
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { type: "button", onClick: this.handleClick, class: {
        'rux-button': true,
        'rux-button--secondary': secondary,
        'rux-button--small': size === 'small',
        'rux-button--large': size === 'large',
        'rux-button--icon-only': iconOnly,
      }, "aria-disabled": disabled ? 'true' : null, disabled: disabled }, icon ? ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("rux-icon", { size: "extra-small", icon: icon, color: secondary ? 'primary' : 'dark' })) : null, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
  get el() { return (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
RuxButton.style = ruxButtonCss;

const ruxButtonGroupCss = ".rux-button-group{display:flex;align-items:center}.rux-button-group rux-button:not(:last-child),.rux-button-group ::slotted(rux-button:not(:last-child)){margin-right:0.625rem}.rux-button-group--left{justify-content:flex-start}.rux-button-group--right{justify-content:flex-end}.rux-button-group--center{justify-content:center}";

const RuxButtonGroup = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    /**
     * The horizontal alignment of buttons within the group
     */
    this.hAlign = 'left';
  }
  render() {
    const { hAlign } = this;
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        'rux-button-group': true,
        'rux-button-group--left': hAlign === 'left',
        'rux-button-group--right': hAlign === 'right',
        'rux-button-group--center': hAlign === 'center',
      } }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
};
RuxButtonGroup.style = ruxButtonGroupCss;




/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ hasShadowDom),
/* harmony export */   "r": () => (/* binding */ renderHiddenInput)
/* harmony export */ });
const hasShadowDom = (el) => {
  return !!el.shadowRoot && !!el.attachShadow;
};
/**
* This method is used to add a hidden input to a host element that contains
* a Shadow DOM. It does not add the input inside of the Shadow root which
* allows it to be picked up inside of forms. It should contain the same
* values as the host element.
* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198

*
* @param always Add a hidden input even if the container does not use Shadow
* @param container The element where the input will be added
* @param name The name of the input
* @param value The value of the input
* @param disabled If true, the input is disabled
* @param checked Optional. If true, the input is checked
*/
const renderHiddenInput = (always, container, name, value, disabled, checked) => {
  let input = container.querySelector('input.aux-input');
  if (always || hasShadowDom(container)) {
    if (checked || checked == undefined) {
      if (!input) {
        input = container.ownerDocument.createElement('input');
        input.type = 'hidden';
        input.classList.add('aux-input');
        container.appendChild(input);
      }
      input.disabled = disabled;
      input.name = name;
      input.value = value || '';
    }
    else {
      if (input) {
        input.remove();
      }
    }
  }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-button_2_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-button_2_entry_js.js.map