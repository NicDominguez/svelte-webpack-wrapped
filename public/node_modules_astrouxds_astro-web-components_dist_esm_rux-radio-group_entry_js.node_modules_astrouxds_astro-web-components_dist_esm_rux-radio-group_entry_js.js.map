{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-radio-group_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-radio-group_entry_js.js","mappings":";;;;;;;;;;;;;;;AAA6G;AAChD;;AAE7D,gCAAgC,cAAc,uBAAuB,aAAa,uDAAuD,kBAAkB,gCAAgC,sCAAsC,iBAAiB,mBAAmB,qBAAqB,oBAAoB,2BAA2B,mBAAmB,4BAA4B,gJAAgJ,8BAA8B,mBAAmB,qBAAqB,sBAAsB,sBAAsB,6vBAA6vB,4BAA4B,qBAAqB,qCAAqC,gBAAgB,kBAAkB,gBAAgB,QAAQ,oBAAoB,2BAA2B,mBAAmB,4BAA4B,gJAAgJ,8BAA8B,iBAAiB,qBAAqB,cAAc,uBAAuB,kCAAkC,gBAAgB;;AAEh5D;AACA;AACA,IAAI,qDAAgB;AACpB,qBAAqB,qDAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA,MAAM,qDAAiB;AACvB;AACA,YAAY,qDAAC,CAAC,iDAAI,IAAI,2BAA2B,gBAAgB,qDAAC,UAAU,oBAAoB,eAAe,qDAAC,UAAU;AAC1H;AACA;AACA,OAAO,sBAAsB,EAAE,qDAAC,sDAAsD,qDAAC,UAAU,wBAAwB,sCAAsC,qDAAC,UAAU,yBAAyB;AACnM;AACA,aAAa,OAAO,qDAAU;AAC9B,0BAA0B;AAC1B;AACA;AACA;AACA;;AAE4C;;;;;;;;;;;;;;;;ACtD5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqD","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-radio-group.entry.js","webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-cf8aeed9.js';\nimport { r as renderHiddenInput } from './utils-0c972f04.js';\n\nconst ruxRadioGroupCss = \":host{display:block}:host .rux-radio-group{padding:1rem;border:1px solid var(--radioGroupBorderColor, #2b659b);border-radius:3px}:host .rux-radio-group--invalid{border:1px solid var(--colorCritical)}:host .rux-label{margin-bottom:1rem}:host .rux-help-text{margin-top:0.625rem;color:var(--secondaryText);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\\\"Roboto\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \\\"Helvetica Neue\\\", sans-serif;font-family:var(--fontFamily);font-weight:normal;letter-spacing:0.5px}:host .rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--colorCritical);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\\\"Roboto\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \\\"Helvetica Neue\\\", sans-serif;font-family:var(--fontFamily);font-weight:bold}::slotted(rux-radio){display:block;margin-bottom:0.625rem}::slotted(rux-radio:last-of-type){margin-bottom:0}\";\n\nconst RuxRadioGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ruxChange = createEvent(this, \"rux-change\", 7);\n    /**\n     * Marks the radio group as invalid\n     */\n    this.invalid = false;\n    /**\n     * The name of the radio group - submitted with form data. Must match the name of the radios in the group.\n     */\n    this.name = '';\n  }\n  emitChange() {\n    this.ruxChange.emit(this.value);\n  }\n  connectedCallback() {\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(e) {\n    const selectedRadio = e.target && e.target.closest('rux-radio');\n    if (selectedRadio && !selectedRadio.disabled) {\n      const oldValue = this.value;\n      const newValue = selectedRadio.value;\n      if (newValue !== oldValue) {\n        this.value = newValue;\n      }\n    }\n  }\n  selectedRadioIsDisabled() {\n    const radio = this.el.querySelector(`rux-radio[value=\"${this.value}\"]`);\n    return radio && radio.disabled;\n  }\n  render() {\n    if (this.value) {\n      renderHiddenInput(true, this.el, this.name, this.value, this.selectedRadioIsDisabled());\n    }\n    return (h(Host, { onClick: this.handleClick }, this.label && h(\"div\", { class: \"rux-label\" }, this.label), h(\"div\", { class: {\n        'rux-radio-group': true,\n        'rux-radio-group--invalid': this.invalid,\n      }, role: \"radiogroup\" }, h(\"slot\", null)), this.helpText && !this.errorText && (h(\"div\", { class: \"rux-help-text\" }, this.helpText)), this.errorText && (h(\"div\", { class: \"rux-error-text\" }, this.errorText))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"emitChange\"]\n  }; }\n};\nRuxRadioGroup.style = ruxRadioGroupCss;\n\nexport { RuxRadioGroup as rux_radio_group };\n","const hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n\nexport { hasShadowDom as h, renderHiddenInput as r };\n"],"names":[],"sourceRoot":""}