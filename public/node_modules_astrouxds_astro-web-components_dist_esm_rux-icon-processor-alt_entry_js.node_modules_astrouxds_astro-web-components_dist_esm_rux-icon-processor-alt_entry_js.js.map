{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-icon-processor-alt_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-icon-processor-alt_entry_js.js","mappings":";;;;;;;;;;;;;;AAA+D;;AAE/D;;AAEA;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qDAAC,UAAU,kCAAkC;AACxD;AACA;;AAEyD","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-icon-processor-alt.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-cf8aeed9.js';\n\nconst svgIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M15.684 2v8.882l-4.218.065-.061.005a.527.527 0 0 0-.444.402l-.01.059-.004.06V22h-1.58l.001-3.684-.003-.062a.527.527 0 0 0-.402-.45l-.06-.011-.06-.004h-3.16l-.061.004-.026.004a1.58 1.58 0 1 0 .01 1.006l.077.04h2.632V22H3.578A1.579 1.579 0 0 1 2 20.421v-5.263h2.632l.061-.004a.527.527 0 0 0 .461-.461l.004-.061V9.278a1.58 1.58 0 1 0-1.143-.035l.09.036v4.826H2V5.158h7.895l.061-.004a.527.527 0 0 0 .462-.461l.003-.061V2H12v5.263H8.842l-.061.004a.527.527 0 0 0-.462.461l-.003.061v5.88a1.58 1.58 0 1 0 1.144.035l-.091-.035V8.316h3.157l.062-.004a.527.527 0 0 0 .461-.461l.004-.062V2h2.631zm3.158 0v8.947l.004.062c.028.241.22.433.461.461l.061.004H22v2.105h-6.842l-.061.003a.527.527 0 0 0-.462.462l-.003.061v3.248a1.58 1.58 0 1 0 1.143.035l-.09-.035v-2.721H22v2.105h-4.21l-.062.003a.527.527 0 0 0-.461.462l-.004.061V22H12V11.992l4.219-.065.06-.005a.527.527 0 0 0 .444-.402l.01-.059.004-.06V2h2.105zM22 17.79v2.631A1.58 1.58 0 0 1 20.421 22h-2.105v-4.21H22zm-6.842.526a.526.526 0 1 1 0 1.052.526.526 0 0 1 0-1.052zm-11.053-.527a.526.526 0 1 1 0 1.053.526.526 0 0 1 0-1.053zm4.737-3.157a.526.526 0 1 1 0 1.052.526.526 0 0 1 0-1.052zM22 3.579v6.842h-2.105V2h.526A1.58 1.58 0 0 1 22 3.579zM4.632 7.263a.526.526 0 1 1 0 1.053.526.526 0 0 1 0-1.053zM9.368 2v2.105H2V3.58C2 2.707 2.707 2 3.579 2h5.79z\" xmlns=\"http://www.w3.org/2000/svg\"/></svg>';\n\nconst RuxIconProcessorAlt = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')\n     */\n    this.size = 'auto';\n  }\n  get iconSize() {\n    const sizes = {\n      'extra-small': '1rem',\n      small: '2rem',\n      normal: '3rem',\n      large: '4rem',\n    };\n    if (sizes[this.size]) {\n      return sizes[this.size];\n    }\n    else {\n      return this.size;\n    }\n  }\n  render() {\n    const style = {\n      fill: this.color,\n      height: this.iconSize,\n      width: this.iconSize,\n    };\n    return h(\"div\", { style: style, innerHTML: svgIcon });\n  }\n};\n\nexport { RuxIconProcessorAlt as rux_icon_processor_alt };\n"],"names":[],"sourceRoot":""}