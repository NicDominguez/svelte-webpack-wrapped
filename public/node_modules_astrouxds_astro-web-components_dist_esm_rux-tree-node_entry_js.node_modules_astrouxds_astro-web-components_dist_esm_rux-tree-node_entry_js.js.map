{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-tree-node_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-tree-node_entry_js.js","mappings":";;;;;;;;;;;;;;AAA6G;;AAE7G,8BAA8B,iCAAiC,+CAA+C,+CAA+C,6CAA6C,yCAAyC,iDAAiD,kBAAkB,sBAAsB,WAAW,YAAY,WAAW,eAAe,2BAA2B,iBAAiB,WAAW,cAAc,sFAAsF,uDAAuD,0CAA0C,aAAa,YAAY,WAAW,SAAS,UAAU,kBAAkB,+CAA+C,oDAAoD,uDAAuD,uEAAuE,kCAAkC,iBAAiB,oBAAoB,wCAAwC,aAAa,YAAY,WAAW,SAAS,UAAU,kBAAkB,+CAA+C,2EAA2E,kBAAkB,2EAA2E,oBAAoB,2EAA2E,kBAAkB,kCAAkC,oBAAoB,2EAA2E,oBAAoB,kCAAkC,kBAAkB,QAAQ,YAAY,wBAAwB,aAAa,mBAAmB,cAAc,gCAAgC,2CAA2C,UAAU,aAAa,+BAA+B,yBAAyB,4BAA4B,wBAAwB,OAAO,kBAAkB,eAAe,cAAc,kBAAkB,oBAAoB,6BAA6B,2CAA2C,WAAW,eAAe,aAAa,cAAc,cAAc,aAAa,aAAa,cAAc,kBAAkB,cAAc,aAAa,UAAU,WAAW,mBAAmB,yCAAyC,wEAAwE,qBAAqB,sBAAsB,kBAAkB,yBAAyB,kBAAkB,iCAAiC,aAAa,QAAQ,kBAAkB,MAAM,eAAe,WAAW,YAAY,kBAAkB,oBAAoB,WAAW,6BAA6B,2CAA2C,WAAW;;AAEzsF;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,+BAA+B,qDAAW;AAC1C,+BAA+B,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,YAAY,qDAAC,CAAC,iDAAI,IAAI,8KAA8K,EAAE,qDAAC,UAAU;AACjN;AACA;AACA;AACA;AACA,SAAS,EAAE,qDAAC,UAAU,gCAAgC,wBAAwB,qDAAC,QAAQ,2DAA2D,IAAI,qDAAC,WAAW,qCAAqC,IAAI,qDAAC,wBAAwB,WAAW,mBAAmB,GAAG,qDAAC,WAAW,mDAAmD;AACpU;AACA,aAAa,OAAO,qDAAU;AAC9B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEwC","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-tree-node.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-cf8aeed9.js';\n\nconst ruxTreeNodeCss = \":host{--treeAccentColor:var(--primary);--treeHoverBackgroundColor:var(--primaryLight);--treeHoverTextColor:var(--primaryElementText);--treeSelectedBorderColor:var(--primaryDark);--treeSelectedAccentColor:var(--primary);--treeExpandedBorderColor:var(--backgroundColor);position:relative;box-sizing:border-box;width:100%;padding:0px;margin:0px;font-size:1rem;color:var(--treeTextColor);user-select:none;width:100%;display:block}:host([aria-expanded=true][aria-level=\\\"1\\\"]:not([aria-selected=true])) .parent:after{border-bottom:solid 1px var(--treeExpandedBorderColor)}:host([aria-selected=true]) .parent:after{content:\\\"\\\";height:30px;width:100%;left:0px;z-index:0;position:absolute;transition:background-color 0.0967s ease-in 0s;border-top:1px solid var(--treeSelectedBorderColor);border-bottom:1px solid var(--treeSelectedBorderColor);box-shadow:inset 0.25rem 0 0 var(--treeSelectedAccentColor) !important}:host([aria-level=\\\"1\\\"]) .parent{font-weight:bold;padding-left:0.5rem}:host([aria-level=\\\"1\\\"]) .parent:after{content:\\\"\\\";height:31px;width:100%;left:0px;z-index:0;position:absolute;transition:background-color 0.0967s ease-in 0s}:host([aria-level=\\\"1\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:2rem}:host([aria-level=\\\"2\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:3.5rem}:host([aria-level=\\\"3\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:5rem}:host([aria-level=\\\"3\\\"]) .parent{padding-left:3.5rem}:host([aria-level=\\\"4\\\"]) .tree-node:not(.tree-node--has-children) .parent{padding-left:6.5rem}:host([aria-level=\\\"4\\\"]) .parent{padding-left:5rem}.parent{height:2rem;padding:0 0.5rem 0 2rem;display:flex;align-items:center}.parent:hover{color:var(--treeHoverTextColor);background:var(--treeHoverBackgroundColor)}.children{display:none}.tree-node--expanded>.children{display:block !important}.tree-node--expanded .arrow{transform:rotate(90deg)}.arrow{position:relative;cursor:pointer;width:0.35rem;margin-right:1rem;margin-left:0.15rem;background-color:transparent;transition:transform 0.167s ease-in-out 0s;z-index:11}.arrow::before{content:\\\"\\\";display:block;height:1.5rem;width:1.5rem;top:-0.15rem;left:-0.65rem;position:absolute}.arrow::after{content:\\\"\\\";width:0px;height:0px;border-style:solid;border-width:0.35rem 0px 0.35rem 0.35rem;border-color:transparent transparent transparent var(--treeAccentColor);display:inline-block}::slotted(rux-status){margin:0 0.625rem}::slotted(rux-tree-node){position:relative}::slotted(rux-tree-node)::before{content:\\\"\\\";order:1;position:absolute;top:0;cursor:pointer;width:20px;height:20px;margin-right:1rem;margin-left:0.15rem;left:-40px;background-color:transparent;transition:transform 0.167s ease-in-out 0s;z-index:11}\";\n\nlet id = 0;\nconst RuxTreeNode = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ruxTreeNodeSelected = createEvent(this, \"rux-tree-node-selected\", 7);\n    this.componentId = `node-${++id}`;\n    this.children = [];\n    /**\n     * Sets the expanded state\n     */\n    this.expanded = false;\n    /**\n     * Sets the selected state\n     */\n    this.selected = false;\n  }\n  handleExpandedChange(newValue) {\n    this.setExpanded(newValue);\n  }\n  handleSelectedChange(newValue) {\n    this.setSelected(newValue);\n  }\n  handleKeyDown(ev) {\n    if (ev.target !== ev.currentTarget) {\n      return true;\n    }\n    switch (ev.key) {\n      case 'ArrowUp':\n        ev.preventDefault();\n        this._focusNext(-1);\n        break;\n      case 'ArrowRight':\n        ev.preventDefault();\n        this._expandNextNode();\n        break;\n      case 'ArrowDown':\n        ev.preventDefault();\n        this._focusNext(1);\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        this._collapseParent();\n        break;\n      case 'Enter':\n        ev.preventDefault();\n        this.setSelected(true);\n        break;\n    }\n  }\n  connectedCallback() {\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n  }\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n  get _hasChildren() {\n    return this.children.length > 0;\n  }\n  /**\n   * Sets the expanded state\n   * @param value\n   */\n  async setExpanded(value) {\n    this.expanded = value;\n  }\n  /**\n   * Sets the selected state\n   * @param value\n   */\n  async setSelected(value) {\n    this.selected = value;\n    if (value) {\n      this.ruxTreeNodeSelected.emit(this.componentId);\n    }\n  }\n  handleSlotChange() {\n    const children = Array.from(this.el.querySelectorAll(`[slot=\"node\"]`));\n    this.children = children;\n    this._setAriaLevel();\n  }\n  /**\n   * Manually set the aria-level attribute.\n   * Tree is responsible for setting the root node levels.\n   */\n  _setAriaLevel() {\n    const level = this.el.getAttribute('aria-level');\n    if (level) {\n      this.children.map((child) => {\n        child.setAttribute('aria-level', `${+level + 1}`);\n      });\n    }\n  }\n  _handleArrowClick(e) {\n    e.stopPropagation();\n    this.setExpanded(!this.expanded);\n  }\n  _handleTreeNodeClick(e) {\n    e.stopPropagation();\n    this.setSelected(!this.selected);\n  }\n  _expandNextNode() {\n    if (!this.expanded && this._hasChildren) {\n      this.setExpanded(true);\n    }\n  }\n  _focusItem(el) {\n    var _a;\n    const parent = (_a = el === null || el === void 0 ? void 0 : el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.parent');\n    if (parent) {\n      parent.focus();\n    }\n  }\n  _collapseParent() {\n    if (this.expanded) {\n      this.setExpanded(false);\n    }\n    else if (this.el.parentElement) {\n      const parentTreeItemNode = this.el.parentElement.closest(\"[role='treeitem']\");\n      if (parentTreeItemNode) {\n        this._focusItem(parentTreeItemNode);\n      }\n    }\n  }\n  _focusNext(direction) {\n    const visibleNodes = this._getVisibleNodes();\n    const currentIndex = visibleNodes.indexOf(this.el);\n    if (currentIndex !== -1) {\n      let nextElement = visibleNodes[currentIndex + direction];\n      if (nextElement !== undefined) {\n        // Skips any disabled nodes\n        while (nextElement.hasAttribute('disabled')) {\n          const offset = direction >= 0 ? 1 : -1;\n          nextElement =\n            visibleNodes[currentIndex + direction + offset];\n          if (!nextElement) {\n            break;\n          }\n        }\n      }\n      if (nextElement) {\n        this._focusItem(nextElement);\n      }\n    }\n  }\n  _getVisibleNodes() {\n    const rootTree = this.el.closest(\"[role='tree']\");\n    const nodes = Array.from(rootTree.querySelectorAll('rux-tree-node'));\n    return nodes.filter((node) => node.offsetParent !== null);\n  }\n  render() {\n    const attrs = this._hasChildren && { role: 'group' };\n    return (h(Host, { role: \"treeitem\", \"aria-expanded\": this.expanded ? 'true' : 'false', \"aria-selected\": this.selected ? 'true' : 'false', onClick: (event) => this._handleTreeNodeClick(event) }, h(\"div\", { id: this.componentId, class: {\n        'tree-node': true,\n        'tree-node--expanded': this.expanded,\n        'tree-node--has-children': this._hasChildren,\n        'tree-node--selected': this.selected,\n      } }, h(\"div\", { class: \"parent\", tabindex: \"0\" }, this._hasChildren && (h(\"i\", { onClick: (e) => this._handleArrowClick(e), class: \"arrow\" })), h(\"slot\", { onSlotchange: this.handleSlotChange })), h(\"div\", Object.assign({}, attrs, { class: \"children\" }), h(\"slot\", { name: \"node\", onSlotchange: this.handleSlotChange })))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"expanded\": [\"handleExpandedChange\"],\n    \"selected\": [\"handleSelectedChange\"]\n  }; }\n};\nRuxTreeNode.style = ruxTreeNodeCss;\n\nexport { RuxTreeNode as rux_tree_node };\n"],"names":[],"sourceRoot":""}