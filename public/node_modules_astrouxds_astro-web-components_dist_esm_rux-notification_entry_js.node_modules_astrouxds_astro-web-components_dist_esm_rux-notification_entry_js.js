"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-notification_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-notification.entry.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-notification.entry.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_notification": () => (/* binding */ RuxNotification)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");


const ruxNotificationCss = ":host{display:flex;justify-content:space-between;flex-wrap:nowrap;flex-grow:1;align-items:center;align-content:center;top:-4.375rem;left:0;height:4.375rem;width:100%;position:absolute;padding:0 1.25rem;background-color:var(--colorStandbyLighten1);transition:top 0.5s ease;box-sizing:border-box;font-size:var(--fontSizeXL);color:var(--notificationTextColor)}:host rux-icon{align-items:center;justify-content:flex-end}:host([open]){top:0}:host,:host([status=standby]){background-color:var(--colorStandbyLighten1)}:host rux-icon,:host([status=standby]) rux-icon{stroke:var(--colorStandbyDarken1);fill:var(--colorStandbyDarken1)}:host([status=normal]){background-color:var(--colorNormalLighten2)}:host([status=normal]) rux-icon{stroke:var(--colorNormalDarken1);fill:var(--colorNormalDarken1)}:host([status=caution]){background-color:var(--colorCautionLighten1)}:host([status=caution]) rux-icon{stroke:var(--colorCautionDarken1);fill:var(--colorCautionDarken1)}:host([status=critical]){background-color:var(--colorCriticalLighten1)}:host([status=critical]) rux-icon{stroke:var(--colorCriticalDarken1);fill:var(--colorCriticalDarken1)}";

const RuxNotification = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    /**
     *  Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
     */
    this.open = false;
    /**
     *  Message for the notification banner.
     */
    this.message = '';
    /**
     *  The background color. Possible values include 'standby', 'normal', 'caution', and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
     */
    this.status = 'standby';
    this._timeoutRef = null;
  }
  watchHandler() {
    this.updated();
  }
  connectedCallback() {
    this.updated();
  }
  updated() {
    if (this._closeAfter && this.open) {
      this._timeoutRef = window.setTimeout(() => {
        this.open = false;
      }, this._closeAfter);
    }
  }
  _onClick() {
    if (this._timeoutRef) {
      clearTimeout(this._timeoutRef);
    }
    this.open = false;
  }
  get _closeAfter() {
    //* as long as it's less than 1000, they put in seconds. Convert that here.
    if (this.closeAfter && this.closeAfter <= 999) {
      //it's in seconds
      this.closeAfter *= 1000; // change into ms
    }
    if ((this.closeAfter && this.closeAfter > 10000) ||
      (this.closeAfter && this.closeAfter < 2000)) {
      // if this number is larger than 10s or smaller than 2s, enforce minimum 2s delay
      this.closeAfter = 2000;
    }
    return this.closeAfter;
  }
  render() {
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-notification__message" }, `${this.message}`), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("rux-icon", { role: "button", label: "Close notification", onClick: () => this._onClick(), icon: "close", size: "small" })));
  }
  static get watchers() { return {
    "open": ["watchHandler"]
  }; }
};
RuxNotification.style = ruxNotificationCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-notification_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-notification_entry_js.js.map