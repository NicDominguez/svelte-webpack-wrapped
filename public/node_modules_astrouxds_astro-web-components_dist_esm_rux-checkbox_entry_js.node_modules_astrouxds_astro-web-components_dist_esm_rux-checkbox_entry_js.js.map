{"version":3,"file":"node_modules_astrouxds_astro-web-components_dist_esm_rux-checkbox_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-checkbox_entry_js.js","mappings":";;;;;;;;;;;;;;;AAAkG;AACrC;;AAE7D,+BAA+B,qCAAqC,mBAAmB,gBAAgB,aAAa,sBAAsB,8BAA8B,0BAA0B,uBAAuB,cAAc,aAAa,kBAAkB,kBAAkB,gBAAgB,mCAAmC,wBAAwB,gBAAgB,yCAAyC,kBAAkB,aAAa,mBAAmB,2BAA2B,+BAA+B,qBAAqB,eAAe,iBAAiB,gDAAgD,aAAa,cAAc,YAAY,aAAa,iBAAiB,gCAAgC,+BAA+B,sBAAsB,sDAAsD,2CAA2C,kBAAkB,wDAAwD,kBAAkB,aAAa,aAAa,QAAQ,WAAW,WAAW,SAAS,+CAA+C,6CAA6C,yBAAyB,yDAAyD,uCAAuC,kDAAkD,6BAA6B,+BAA+B,sEAAsE,4CAA4C,wDAAwD,sBAAsB,sBAAsB,kCAAkC,4BAA4B,0BAA0B,2DAA2D,oBAAoB,4HAA4H,kCAAkC,gIAAgI,kCAAkC,wBAAwB,kBAAkB,2DAA2D,sBAAsB,eAAe,oBAAoB,2BAA2B,mBAAmB,4BAA4B,gJAAgJ,8BAA8B,mBAAmB,qBAAqB,gBAAgB,sBAAsB,6vBAA6vB,4BAA4B,qBAAqB,qCAAqC,gBAAgB,kBAAkB,gBAAgB,QAAQ,oBAAoB,2BAA2B,mBAAmB,4BAA4B,gJAAgJ,8BAA8B,iBAAiB;;AAEnpH;AACA;AACA;AACA,IAAI,qDAAgB;AACpB,qBAAqB,qDAAW;AAChC,oBAAoB,qDAAW;AAC/B,mBAAmB,qDAAW;AAC9B,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAA6E;AACzF,IAAI,qDAAiB;AACrB,YAAY,qDAAC,UAAU,yBAAyB,EAAE,qDAAC,UAAU;AAC7D;AACA;AACA;AACA,SAAS,EAAE,qDAAC,YAAY,sMAAsM,GAAG,qDAAC,YAAY,qBAAqB,EAAE,qDAAC,uDAAuD,qDAAC,UAAU,wBAAwB,iCAAiC,qDAAC,UAAU,yBAAyB;AACra;AACA,aAAa,OAAO,qDAAU;AAC9B;AACA;;AAEuC;;;;;;;;;;;;;;;;AC5EvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqD","sources":["webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/rux-checkbox.entry.js","webpack://svelte-app/./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-cf8aeed9.js';\nimport { r as renderHiddenInput } from './utils-0c972f04.js';\n\nconst ruxCheckboxCss = \":host{}:host *,:host *:before,:host *:after{box-sizing:inherit}.rux-form-field{display:flex;flex-direction:column;font-family:var(--fontFamily);font-size:var(--fontSize);color:var(--fontColor)}.rux-checkbox{display:flex;position:relative;margin:0 0 1rem 0;line-height:1.2}.rux-checkbox input[type=checkbox]{-webkit-appearance:none;appearance:none}.rux-checkbox input[type=checkbox]+label{position:relative;display:flex;align-items:center;justify-content:flex-start;color:var(--controlLabelColor);letter-spacing:0.5px;cursor:pointer;margin-left:-7px}.rux-checkbox input[type=checkbox]+label:before{display:flex;flex-shrink:0;flex-grow:0;content:\\\"\\\";align-self:start;height:var(--controlOptionSize);width:var(--controlOptionSize);margin:0 0.625rem 0 0;background-color:var(--controlOutlineBackgroundColor);border:1px solid var(--controlBorderColor);border-radius:2px}.rux-checkbox input[type=checkbox]:checked+label::after{position:absolute;display:flex;content:\\\"\\\";top:5px;height:6px;width:12px;left:3px;border-right:2px solid var(--controlTextColor);border-top:2px solid var(--controlTextColor);transform:rotate(125deg)}.rux-checkbox input[type=checkbox]:checked+label::before{border-color:var(--controlBorderColor)}.rux-checkbox input[type=checkbox]:disabled+label{cursor:var(--disabledCursor);opacity:var(--disabledOpacity)}.rux-checkbox input[type=checkbox]:not(:disabled):hover+label::before{border-color:var(--controlHoverBorderColor)}.rux-checkbox input[indeterminate]:checked+label::after{width:10px !important;height:5px !important;transform:rotate(0deg) !important;border-right:0px !important;border-top:0px !important;border-bottom:2px solid var(--controlTextColor) !important;left:4px !important}.rux-checkbox--has-error input[type=checkbox]+label:after,.rux-checkbox--has-error input[type=checkbox]:checked+label:after{border-color:var(--colorCritical)}.rux-checkbox--has-error input[type=checkbox]+label::before,.rux-checkbox--has-error input[type=checkbox]:checked+label::before{border-color:var(--colorCritical)}.rux-checkbox--has-text{margin-bottom:0px}.rux-checkbox+.rux-help-text,.rux-checkbox+.rux-error-text{margin-bottom:0.75rem}.rux-help-text{margin-top:0.625rem;color:var(--secondaryText);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\\\"Roboto\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \\\"Helvetica Neue\\\", sans-serif;font-family:var(--fontFamily);font-weight:normal;letter-spacing:0.5px}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--colorCritical);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\\\"Roboto\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \\\"Helvetica Neue\\\", sans-serif;font-family:var(--fontFamily);font-weight:bold}\";\n\nlet id = 0;\nconst RuxCheckbox = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ruxChange = createEvent(this, \"rux-change\", 7);\n    this.ruxInput = createEvent(this, \"rux-input\", 7);\n    this.ruxBlur = createEvent(this, \"rux-blur\", 7);\n    this.checkboxId = `rux-checkbox-${++id}`;\n    /**\n     * The checkbox name\n     */\n    this.name = '';\n    /**\n     * The checkbox value\n     */\n    this.value = '';\n    /**\n     * Toggles checked state of a checkbox\n     */\n    this.checked = false;\n    /**\n     * Toggles indeterminate state of a checkbox\n     */\n    this.indeterminate = false;\n    /**\n     * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.\n     */\n    this.disabled = false;\n    /**\n     * Sets the input as required\n     */\n    this.required = false;\n    this._onBlur = () => {\n      this.ruxBlur.emit();\n    };\n  }\n  componentWillLoad() {\n    this._onChange = this._onChange.bind(this);\n    this._onInput = this._onInput.bind(this);\n  }\n  componentDidLoad() {\n    var _a;\n    const input = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('input');\n    if (input && this.indeterminate) {\n      // indeterminate property does not exist in HTML but is accessible via js\n      input.setAttribute('indeterminate', this.indeterminate ? 'indeterminate' : '');\n    }\n  }\n  _onChange(e) {\n    const target = e.target;\n    this.checked = target.checked;\n    this.ruxChange.emit(this.checked);\n  }\n  _onInput(e) {\n    const target = e.target;\n    this.value = target.value;\n    this.ruxInput.emit();\n  }\n  render() {\n    const { checkboxId, checked, disabled, errorText, helpText, name, required, value, } = this;\n    renderHiddenInput(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);\n    return (h(\"div\", { class: \"rux-form-field\" }, h(\"div\", { class: {\n        'rux-checkbox': true,\n        'rux-checkbox--has-error': required,\n        'rux-checkbox--has-text': errorText !== undefined || helpText !== undefined,\n      } }, h(\"input\", { type: \"checkbox\", name: name, id: checkboxId, disabled: disabled, required: required, checked: checked, value: value, onChange: this._onChange, onInput: this._onInput, onBlur: () => this._onBlur() }), h(\"label\", { htmlFor: checkboxId }, h(\"slot\", null))), this.helpText && !this.errorText && (h(\"div\", { class: \"rux-help-text\" }, helpText)), this.errorText && (h(\"div\", { class: \"rux-error-text\" }, errorText))));\n  }\n  get el() { return getElement(this); }\n};\nRuxCheckbox.style = ruxCheckboxCss;\n\nexport { RuxCheckbox as rux_checkbox };\n","const hasShadowDom = (el) => {\n  return !!el.shadowRoot && !!el.attachShadow;\n};\n/**\n* This method is used to add a hidden input to a host element that contains\n* a Shadow DOM. It does not add the input inside of the Shadow root which\n* allows it to be picked up inside of forms. It should contain the same\n* values as the host element.\n* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198\n\n*\n* @param always Add a hidden input even if the container does not use Shadow\n* @param container The element where the input will be added\n* @param name The name of the input\n* @param value The value of the input\n* @param disabled If true, the input is disabled\n* @param checked Optional. If true, the input is checked\n*/\nconst renderHiddenInput = (always, container, name, value, disabled, checked) => {\n  let input = container.querySelector('input.aux-input');\n  if (always || hasShadowDom(container)) {\n    if (checked || checked == undefined) {\n      if (!input) {\n        input = container.ownerDocument.createElement('input');\n        input.type = 'hidden';\n        input.classList.add('aux-input');\n        container.appendChild(input);\n      }\n      input.disabled = disabled;\n      input.name = name;\n      input.value = value || '';\n    }\n    else {\n      if (input) {\n        input.remove();\n      }\n    }\n  }\n};\n\nexport { hasShadowDom as h, renderHiddenInput as r };\n"],"names":[],"sourceRoot":""}