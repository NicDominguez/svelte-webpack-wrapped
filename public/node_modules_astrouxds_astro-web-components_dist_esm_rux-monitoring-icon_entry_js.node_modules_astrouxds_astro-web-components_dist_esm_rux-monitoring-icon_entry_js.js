"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-icon_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M": () => (/* binding */ MonitoringLabel),
/* harmony export */   "a": () => (/* binding */ MonitoringBadge)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");


const collapseNotifications = (value) => {
  const n = Math.floor(value);
  // don't show any values less than 0
  if (n <= 0)
    return null;
  // get the place value
  const thousand = Math.floor((n / 1000) % 1000); // only return a whole number
  const million = (n / 1000000) % 1000000; // return a decimal value for numbers like 1.2m
  const billion = (n / 1000000000) % 1000000000; // return a decimal value for numbers like 1.2b
  const trillion = (n / 1000000000000) % 1000000000000; // trillion is just to offer an overflow instance
  // set the display to its original state
  let _shorthand = n.toString();
  if (trillion >= 1) {
    _shorthand = '∞';
  }
  else if (billion >= 1) {
    _shorthand = `${billion.toFixed(1).toString()}B`;
  }
  else if (million >= 1) {
    _shorthand = `${million.toFixed(1).toString()}M`;
  }
  else if (thousand >= 1) {
    _shorthand = `${thousand}K`;
  }
  return _shorthand;
};
const MonitoringBadge = ({ notifications, }) => ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `rux-advanced-status__badge ${!notifications ? 'rux-advanced-status__hidden' : ''}` }, notifications && collapseNotifications(notifications)));

const MonitoringLabel = ({ label, sublabel, }) => ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-advanced-status__label" },
  label,
  (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: `rux-advanced-status__sublabel ${!sublabel ? 'rux-advanced-status__hidden' : ''}` }, sublabel)));




/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-monitoring-icon.entry.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-monitoring-icon.entry.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_monitoring_icon": () => (/* binding */ RuxMonitoringIcon)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");
/* harmony import */ var _MonitoringLabel_ce07078e_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MonitoringLabel-ce07078e.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/MonitoringLabel-ce07078e.js");



const ruxMonitoringIconCss = ":host{display:inline-block;padding:0}*[hidden]{display:none !important}*,*:before,*:after{box-sizing:border-box}.rux-advanced-status{display:flex;flex-direction:column;justify-content:flex-start;position:relative;margin:0;line-height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.rux-advanced-status__icon-group{display:flex;position:relative;margin:0 auto;width:4.5rem}rux-icon{order:2;margin:0 auto;width:2.7rem;height:2.7rem}.rux-advanced-status__status{position:absolute;top:-0.4rem;left:-0.4rem;margin:0}.rux-advanced-status__badge{display:block;z-index:2;order:3;position:absolute;bottom:-0.75rem;right:-0.4rem;border:1px solid rgba(255, 255, 255, 0.6);border-radius:3px;padding:0.65rem 0.25rem;color:#fff;font-size:0.775rem;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:#000}.rux-advanced-status__label{color:var(--fontColor);font-size:0.875rem;text-align:center;text-overflow:ellipsis;white-space:nowrap;line-height:1.2;overflow:hidden;margin-top:1rem;width:100%;max-width:6.25rem}.rux-advanced-status__sublabel{font-size:0.65em;color:var(--fontColor);opacity:0.6;display:block}.rux-advanced-status__hidden{display:none}:host([status=off]) rux-icon{fill:var(--colorOff)}:host([status=standby]) rux-icon{fill:var(--colorStandby)}:host([status=normal]) rux-icon{fill:var(--colorNormal)}:host([status=caution]) rux-icon{fill:var(--colorCaution)}:host([status=serious]) rux-icon{fill:var(--colorSerious)}:host([status=critical]) rux-icon{fill:var(--colorCritical)}";

const RuxMonitoringIcon = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    /**
     * Styles the icon according to the Astro Status colors.
     * Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
     */
    this.status = 'normal';
    /**
     * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon.
     * Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands,
     * `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
     */
    this.notifications = 0;
  }
  validateStatus(newValue) {
    const statusTypes = {
      off: true,
      standby: true,
      normal: true,
      caution: true,
      serious: true,
      critical: true,
    };
    if (!statusTypes[newValue]) {
      throw new Error('valid status required');
    }
  }
  render() {
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "rux-advanced-status__icon", class: "rux-advanced-status", title: `${this.notifications} ${this.label} ${this.sublabel}` }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-advanced-status__icon-group" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-advanced-status__status" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("rux-status", { status: this.status })), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("rux-icon", { icon: this.icon, class: `rux-status--${this.status}` }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_MonitoringLabel_ce07078e_js__WEBPACK_IMPORTED_MODULE_1__.a, { notifications: this.notifications })), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)(_MonitoringLabel_ce07078e_js__WEBPACK_IMPORTED_MODULE_1__.M, { label: this.label, sublabel: this.sublabel })));
  }
  static get watchers() { return {
    "status": ["validateStatus"]
  }; }
};
RuxMonitoringIcon.style = ruxMonitoringIconCss;




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-icon_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-monitoring-icon_entry_js.js.map