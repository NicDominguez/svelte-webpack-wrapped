"use strict";
(self["webpackChunksvelte_app"] = self["webpackChunksvelte_app"] || []).push([["node_modules_astrouxds_astro-web-components_dist_esm_rux-checkbox_entry_js"],{

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/rux-checkbox.entry.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/rux-checkbox.entry.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rux_checkbox": () => (/* binding */ RuxCheckbox)
/* harmony export */ });
/* harmony import */ var _index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-cf8aeed9.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/index-cf8aeed9.js");
/* harmony import */ var _utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-0c972f04.js */ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js");



const ruxCheckboxCss = ":host{}:host *,:host *:before,:host *:after{box-sizing:inherit}.rux-form-field{display:flex;flex-direction:column;font-family:var(--fontFamily);font-size:var(--fontSize);color:var(--fontColor)}.rux-checkbox{display:flex;position:relative;margin:0 0 1rem 0;line-height:1.2}.rux-checkbox input[type=checkbox]{-webkit-appearance:none;appearance:none}.rux-checkbox input[type=checkbox]+label{position:relative;display:flex;align-items:center;justify-content:flex-start;color:var(--controlLabelColor);letter-spacing:0.5px;cursor:pointer;margin-left:-7px}.rux-checkbox input[type=checkbox]+label:before{display:flex;flex-shrink:0;flex-grow:0;content:\"\";align-self:start;height:var(--controlOptionSize);width:var(--controlOptionSize);margin:0 0.625rem 0 0;background-color:var(--controlOutlineBackgroundColor);border:1px solid var(--controlBorderColor);border-radius:2px}.rux-checkbox input[type=checkbox]:checked+label::after{position:absolute;display:flex;content:\"\";top:5px;height:6px;width:12px;left:3px;border-right:2px solid var(--controlTextColor);border-top:2px solid var(--controlTextColor);transform:rotate(125deg)}.rux-checkbox input[type=checkbox]:checked+label::before{border-color:var(--controlBorderColor)}.rux-checkbox input[type=checkbox]:disabled+label{cursor:var(--disabledCursor);opacity:var(--disabledOpacity)}.rux-checkbox input[type=checkbox]:not(:disabled):hover+label::before{border-color:var(--controlHoverBorderColor)}.rux-checkbox input[indeterminate]:checked+label::after{width:10px !important;height:5px !important;transform:rotate(0deg) !important;border-right:0px !important;border-top:0px !important;border-bottom:2px solid var(--controlTextColor) !important;left:4px !important}.rux-checkbox--has-error input[type=checkbox]+label:after,.rux-checkbox--has-error input[type=checkbox]:checked+label:after{border-color:var(--colorCritical)}.rux-checkbox--has-error input[type=checkbox]+label::before,.rux-checkbox--has-error input[type=checkbox]:checked+label::before{border-color:var(--colorCritical)}.rux-checkbox--has-text{margin-bottom:0px}.rux-checkbox+.rux-help-text,.rux-checkbox+.rux-error-text{margin-bottom:0.75rem}.rux-help-text{margin-top:0.625rem;color:var(--secondaryText);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\"Roboto\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;font-family:var(--fontFamily);font-weight:normal;letter-spacing:0.5px}.rux-error-text{padding-left:1.625rem;background-image:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20128%20128%22%3E%0A%20%20%3Cpath%20fill%3D%22%23FF3030%22%20fill-rule%3D%22evenodd%22%20d%3D%22M64.031%205c8.461%200%2068.88%20107.243%2063.648%20114.184-5.232%206.942-120.805%205.477-127.212%200C-5.941%20113.708%2055.57%205%2064.03%205zm3.45%2075.894l1.822-34.893H56.946l1.82%2034.893h8.715zM56.803%2093.108c0%201.929.547%203.423%201.643%204.483%201.095%201.06%202.642%201.589%204.642%201.589%201.953%200%203.477-.542%204.572-1.625%201.095-1.084%201.643-2.566%201.643-4.447%200-1.952-.542-3.452-1.625-4.5-1.084-1.047-2.613-1.571-4.59-1.571-2.047%200-3.607.512-4.678%201.536-1.072%201.023-1.607%202.535-1.607%204.535z%22%2F%3E%0A%3C%2Fsvg%3E);background-repeat:no-repeat;background-size:1rem;background-position:center left 0rem;text-align:left;width:fit-content;-webkit-order:3;order:3;margin-top:0.625rem;color:var(--colorCritical);font-size:0.875rem;font-size:var(--fontSizeMD);font-family:\"Roboto\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;font-family:var(--fontFamily);font-weight:bold}";

let id = 0;
const RuxCheckbox = class {
  constructor(hostRef) {
    (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ruxChange = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-change", 7);
    this.ruxInput = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-input", 7);
    this.ruxBlur = (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rux-blur", 7);
    this.checkboxId = `rux-checkbox-${++id}`;
    /**
     * The checkbox name
     */
    this.name = '';
    /**
     * The checkbox value
     */
    this.value = '';
    /**
     * Toggles checked state of a checkbox
     */
    this.checked = false;
    /**
     * Toggles indeterminate state of a checkbox
     */
    this.indeterminate = false;
    /**
     * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
     */
    this.disabled = false;
    /**
     * Sets the input as required
     */
    this.required = false;
    this._onBlur = () => {
      this.ruxBlur.emit();
    };
  }
  componentWillLoad() {
    this._onChange = this._onChange.bind(this);
    this._onInput = this._onInput.bind(this);
  }
  componentDidLoad() {
    var _a;
    const input = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('input');
    if (input && this.indeterminate) {
      // indeterminate property does not exist in HTML but is accessible via js
      input.setAttribute('indeterminate', this.indeterminate ? 'indeterminate' : '');
    }
  }
  _onChange(e) {
    const target = e.target;
    this.checked = target.checked;
    this.ruxChange.emit(this.checked);
  }
  _onInput(e) {
    const target = e.target;
    this.value = target.value;
    this.ruxInput.emit();
  }
  render() {
    const { checkboxId, checked, disabled, errorText, helpText, name, required, value, } = this;
    (0,_utils_0c972f04_js__WEBPACK_IMPORTED_MODULE_1__.r)(true, this.el, this.name, this.value ? this.value : 'on', this.disabled, this.checked);
    return ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-form-field" }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
        'rux-checkbox': true,
        'rux-checkbox--has-error': required,
        'rux-checkbox--has-text': errorText !== undefined || helpText !== undefined,
      } }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { type: "checkbox", name: name, id: checkboxId, disabled: disabled, required: required, checked: checked, value: value, onChange: this._onChange, onInput: this._onInput, onBlur: () => this._onBlur() }), (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { htmlFor: checkboxId }, (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null))), this.helpText && !this.errorText && ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-help-text" }, helpText)), this.errorText && ((0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rux-error-text" }, errorText))));
  }
  get el() { return (0,_index_cf8aeed9_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
};
RuxCheckbox.style = ruxCheckboxCss;




/***/ }),

/***/ "./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@astrouxds/astro-web-components/dist/esm/utils-0c972f04.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ hasShadowDom),
/* harmony export */   "r": () => (/* binding */ renderHiddenInput)
/* harmony export */ });
const hasShadowDom = (el) => {
  return !!el.shadowRoot && !!el.attachShadow;
};
/**
* This method is used to add a hidden input to a host element that contains
* a Shadow DOM. It does not add the input inside of the Shadow root which
* allows it to be picked up inside of forms. It should contain the same
* values as the host element.
* https://github.com/ionic-team/ionic-framework/blob/ae96563fb3c4612cb8585292b389ee746f5759f7/core/src/utils/helpers.ts#L198

*
* @param always Add a hidden input even if the container does not use Shadow
* @param container The element where the input will be added
* @param name The name of the input
* @param value The value of the input
* @param disabled If true, the input is disabled
* @param checked Optional. If true, the input is checked
*/
const renderHiddenInput = (always, container, name, value, disabled, checked) => {
  let input = container.querySelector('input.aux-input');
  if (always || hasShadowDom(container)) {
    if (checked || checked == undefined) {
      if (!input) {
        input = container.ownerDocument.createElement('input');
        input.type = 'hidden';
        input.classList.add('aux-input');
        container.appendChild(input);
      }
      input.disabled = disabled;
      input.name = name;
      input.value = value || '';
    }
    else {
      if (input) {
        input.remove();
      }
    }
  }
};




/***/ })

}]);
//# sourceMappingURL=node_modules_astrouxds_astro-web-components_dist_esm_rux-checkbox_entry_js.node_modules_astrouxds_astro-web-components_dist_esm_rux-checkbox_entry_js.js.map